package trikita.anvil.material;

import android.content.res.ColorStateList;
import android.graphics.PorterDuff;
import android.graphics.Typeface;
import android.graphics.drawable.Drawable;
import android.view.MenuItem;
import android.view.View;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewpager.widget.ViewPager;
import com.google.android.material.animation.MotionSpec;
import com.google.android.material.appbar.AppBarLayout;
import com.google.android.material.appbar.CollapsingToolbarLayout;
import com.google.android.material.bottomappbar.BottomAppBar;
import com.google.android.material.bottomnavigation.BottomNavigationItemView;
import com.google.android.material.bottomnavigation.BottomNavigationMenuView;
import com.google.android.material.bottomnavigation.BottomNavigationPresenter;
import com.google.android.material.bottomnavigation.BottomNavigationView;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.chip.Chip;
import com.google.android.material.chip.ChipGroup;
import com.google.android.material.circularreveal.CircularRevealFrameLayout;
import com.google.android.material.circularreveal.CircularRevealGridLayout;
import com.google.android.material.circularreveal.CircularRevealLinearLayout;
import com.google.android.material.circularreveal.CircularRevealRelativeLayout;
import com.google.android.material.circularreveal.CircularRevealWidget;
import com.google.android.material.circularreveal.cardview.CircularRevealCardView;
import com.google.android.material.circularreveal.coordinatorlayout.CircularRevealCoordinatorLayout;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.google.android.material.internal.BaselineLayout;
import com.google.android.material.internal.CheckableImageButton;
import com.google.android.material.internal.FlowLayout;
import com.google.android.material.internal.ForegroundLinearLayout;
import com.google.android.material.internal.NavigationMenuItemView;
import com.google.android.material.internal.NavigationMenuView;
import com.google.android.material.internal.ScrimInsetsFrameLayout;
import com.google.android.material.internal.VisibilityAwareImageButton;
import com.google.android.material.navigation.NavigationView;
import com.google.android.material.snackbar.SnackbarContentLayout;
import com.google.android.material.tabs.TabItem;
import com.google.android.material.tabs.TabLayout;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import com.google.android.material.transformation.TransformationChildCard;
import com.google.android.material.transformation.TransformationChildLayout;
import java.lang.Boolean;
import java.lang.CharSequence;
import java.lang.Float;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.String;
import java.lang.Void;
import trikita.anvil.Anvil;
import trikita.anvil.BaseDSL;

/**
 * DSL for creating views and settings their attributes.
 * This file has been generated by {@code gradle generateMaterialDSL}.
 * It contains views and their setters from the library material.
 * Please, don't edit it manually unless for debugging.
 */
public final class MaterialDSL implements Anvil.AttributeSetter {
  static {
    Anvil.registerAttributeSetter(new MaterialDSL());
  }

  public static BaseDSL.ViewClassResult appBarLayout() {
    return BaseDSL.v(AppBarLayout.class);
  }

  public static Void appBarLayout(Anvil.Renderable r) {
    return BaseDSL.v(AppBarLayout.class, r);
  }

  public static BaseDSL.ViewClassResult collapsingToolbarLayout() {
    return BaseDSL.v(CollapsingToolbarLayout.class);
  }

  public static Void collapsingToolbarLayout(Anvil.Renderable r) {
    return BaseDSL.v(CollapsingToolbarLayout.class, r);
  }

  public static BaseDSL.ViewClassResult bottomAppBar() {
    return BaseDSL.v(BottomAppBar.class);
  }

  public static Void bottomAppBar(Anvil.Renderable r) {
    return BaseDSL.v(BottomAppBar.class, r);
  }

  public static BaseDSL.ViewClassResult bottomNavigationItemView() {
    return BaseDSL.v(BottomNavigationItemView.class);
  }

  public static Void bottomNavigationItemView(Anvil.Renderable r) {
    return BaseDSL.v(BottomNavigationItemView.class, r);
  }

  public static BaseDSL.ViewClassResult bottomNavigationMenuView() {
    return BaseDSL.v(BottomNavigationMenuView.class);
  }

  public static Void bottomNavigationMenuView(Anvil.Renderable r) {
    return BaseDSL.v(BottomNavigationMenuView.class, r);
  }

  public static BaseDSL.ViewClassResult bottomNavigationView() {
    return BaseDSL.v(BottomNavigationView.class);
  }

  public static Void bottomNavigationView(Anvil.Renderable r) {
    return BaseDSL.v(BottomNavigationView.class, r);
  }

  public static BaseDSL.ViewClassResult materialButton() {
    return BaseDSL.v(MaterialButton.class);
  }

  public static Void materialButton(Anvil.Renderable r) {
    return BaseDSL.v(MaterialButton.class, r);
  }

  public static BaseDSL.ViewClassResult materialCardView() {
    return BaseDSL.v(MaterialCardView.class);
  }

  public static Void materialCardView(Anvil.Renderable r) {
    return BaseDSL.v(MaterialCardView.class, r);
  }

  public static BaseDSL.ViewClassResult chip() {
    return BaseDSL.v(Chip.class);
  }

  public static Void chip(Anvil.Renderable r) {
    return BaseDSL.v(Chip.class, r);
  }

  public static BaseDSL.ViewClassResult chipGroup() {
    return BaseDSL.v(ChipGroup.class);
  }

  public static Void chipGroup(Anvil.Renderable r) {
    return BaseDSL.v(ChipGroup.class, r);
  }

  public static BaseDSL.ViewClassResult circularRevealFrameLayout() {
    return BaseDSL.v(CircularRevealFrameLayout.class);
  }

  public static Void circularRevealFrameLayout(Anvil.Renderable r) {
    return BaseDSL.v(CircularRevealFrameLayout.class, r);
  }

  public static BaseDSL.ViewClassResult circularRevealGridLayout() {
    return BaseDSL.v(CircularRevealGridLayout.class);
  }

  public static Void circularRevealGridLayout(Anvil.Renderable r) {
    return BaseDSL.v(CircularRevealGridLayout.class, r);
  }

  public static BaseDSL.ViewClassResult circularRevealLinearLayout() {
    return BaseDSL.v(CircularRevealLinearLayout.class);
  }

  public static Void circularRevealLinearLayout(Anvil.Renderable r) {
    return BaseDSL.v(CircularRevealLinearLayout.class, r);
  }

  public static BaseDSL.ViewClassResult circularRevealRelativeLayout() {
    return BaseDSL.v(CircularRevealRelativeLayout.class);
  }

  public static Void circularRevealRelativeLayout(Anvil.Renderable r) {
    return BaseDSL.v(CircularRevealRelativeLayout.class, r);
  }

  public static BaseDSL.ViewClassResult circularRevealCardView() {
    return BaseDSL.v(CircularRevealCardView.class);
  }

  public static Void circularRevealCardView(Anvil.Renderable r) {
    return BaseDSL.v(CircularRevealCardView.class, r);
  }

  public static BaseDSL.ViewClassResult circularRevealCoordinatorLayout() {
    return BaseDSL.v(CircularRevealCoordinatorLayout.class);
  }

  public static Void circularRevealCoordinatorLayout(Anvil.Renderable r) {
    return BaseDSL.v(CircularRevealCoordinatorLayout.class, r);
  }

  public static BaseDSL.ViewClassResult floatingActionButton() {
    return BaseDSL.v(FloatingActionButton.class);
  }

  public static Void floatingActionButton(Anvil.Renderable r) {
    return BaseDSL.v(FloatingActionButton.class, r);
  }

  public static BaseDSL.ViewClassResult baselineLayout() {
    return BaseDSL.v(BaselineLayout.class);
  }

  public static Void baselineLayout(Anvil.Renderable r) {
    return BaseDSL.v(BaselineLayout.class, r);
  }

  public static BaseDSL.ViewClassResult checkableImageButton() {
    return BaseDSL.v(CheckableImageButton.class);
  }

  public static Void checkableImageButton(Anvil.Renderable r) {
    return BaseDSL.v(CheckableImageButton.class, r);
  }

  public static BaseDSL.ViewClassResult flowLayout() {
    return BaseDSL.v(FlowLayout.class);
  }

  public static Void flowLayout(Anvil.Renderable r) {
    return BaseDSL.v(FlowLayout.class, r);
  }

  public static BaseDSL.ViewClassResult foregroundLinearLayout() {
    return BaseDSL.v(ForegroundLinearLayout.class);
  }

  public static Void foregroundLinearLayout(Anvil.Renderable r) {
    return BaseDSL.v(ForegroundLinearLayout.class, r);
  }

  public static BaseDSL.ViewClassResult navigationMenuItemView() {
    return BaseDSL.v(NavigationMenuItemView.class);
  }

  public static Void navigationMenuItemView(Anvil.Renderable r) {
    return BaseDSL.v(NavigationMenuItemView.class, r);
  }

  public static BaseDSL.ViewClassResult navigationMenuView() {
    return BaseDSL.v(NavigationMenuView.class);
  }

  public static Void navigationMenuView(Anvil.Renderable r) {
    return BaseDSL.v(NavigationMenuView.class, r);
  }

  public static BaseDSL.ViewClassResult scrimInsetsFrameLayout() {
    return BaseDSL.v(ScrimInsetsFrameLayout.class);
  }

  public static Void scrimInsetsFrameLayout(Anvil.Renderable r) {
    return BaseDSL.v(ScrimInsetsFrameLayout.class, r);
  }

  public static BaseDSL.ViewClassResult visibilityAwareImageButton() {
    return BaseDSL.v(VisibilityAwareImageButton.class);
  }

  public static Void visibilityAwareImageButton(Anvil.Renderable r) {
    return BaseDSL.v(VisibilityAwareImageButton.class, r);
  }

  public static BaseDSL.ViewClassResult navigationView() {
    return BaseDSL.v(NavigationView.class);
  }

  public static Void navigationView(Anvil.Renderable r) {
    return BaseDSL.v(NavigationView.class, r);
  }

  public static BaseDSL.ViewClassResult snackbarContentLayout() {
    return BaseDSL.v(SnackbarContentLayout.class);
  }

  public static Void snackbarContentLayout(Anvil.Renderable r) {
    return BaseDSL.v(SnackbarContentLayout.class, r);
  }

  public static BaseDSL.ViewClassResult tabItem() {
    return BaseDSL.v(TabItem.class);
  }

  public static Void tabItem(Anvil.Renderable r) {
    return BaseDSL.v(TabItem.class, r);
  }

  public static BaseDSL.ViewClassResult tabLayout() {
    return BaseDSL.v(TabLayout.class);
  }

  public static Void tabLayout(Anvil.Renderable r) {
    return BaseDSL.v(TabLayout.class, r);
  }

  public static BaseDSL.ViewClassResult textInputEditText() {
    return BaseDSL.v(TextInputEditText.class);
  }

  public static Void textInputEditText(Anvil.Renderable r) {
    return BaseDSL.v(TextInputEditText.class, r);
  }

  public static BaseDSL.ViewClassResult textInputLayout() {
    return BaseDSL.v(TextInputLayout.class);
  }

  public static Void textInputLayout(Anvil.Renderable r) {
    return BaseDSL.v(TextInputLayout.class, r);
  }

  public static BaseDSL.ViewClassResult transformationChildCard() {
    return BaseDSL.v(TransformationChildCard.class);
  }

  public static Void transformationChildCard(Anvil.Renderable r) {
    return BaseDSL.v(TransformationChildCard.class, r);
  }

  public static BaseDSL.ViewClassResult transformationChildLayout() {
    return BaseDSL.v(TransformationChildLayout.class);
  }

  public static Void transformationChildLayout(Anvil.Renderable r) {
    return BaseDSL.v(TransformationChildLayout.class, r);
  }

  public static Void backgroundTint(@Nullable ColorStateList arg) {
    return BaseDSL.attr("backgroundTint", arg);
  }

  public static Void boxBackgroundColor(int arg) {
    return BaseDSL.attr("boxBackgroundColor", arg);
  }

  public static Void boxBackgroundColorResource(int arg) {
    return BaseDSL.attr("boxBackgroundColorResource", arg);
  }

  public static Void boxBackgroundMode(int arg) {
    return BaseDSL.attr("boxBackgroundMode", arg);
  }

  public static Void boxStrokeColor(int arg) {
    return BaseDSL.attr("boxStrokeColor", arg);
  }

  public static Void checkable(boolean arg) {
    return BaseDSL.attr("checkable", arg);
  }

  public static Void checked(boolean arg) {
    return BaseDSL.attr("checked", arg);
  }

  public static Void checkedItem(MenuItem arg) {
    return BaseDSL.attr("checkedItem", arg);
  }

  public static Void checkedItem(int arg) {
    return BaseDSL.attr("checkedItem", arg);
  }

  public static Void chipSpacing(int arg) {
    return BaseDSL.attr("chipSpacing", arg);
  }

  public static Void chipSpacingHorizontal(int arg) {
    return BaseDSL.attr("chipSpacingHorizontal", arg);
  }

  public static Void chipSpacingHorizontalResource(int arg) {
    return BaseDSL.attr("chipSpacingHorizontalResource", arg);
  }

  public static Void chipSpacingResource(int arg) {
    return BaseDSL.attr("chipSpacingResource", arg);
  }

  public static Void chipSpacingVertical(int arg) {
    return BaseDSL.attr("chipSpacingVertical", arg);
  }

  public static Void chipSpacingVerticalResource(int arg) {
    return BaseDSL.attr("chipSpacingVerticalResource", arg);
  }

  public static Void circularRevealOverlayDrawable(@Nullable Drawable arg) {
    return BaseDSL.attr("circularRevealOverlayDrawable", arg);
  }

  public static Void circularRevealScrimColor(int arg) {
    return BaseDSL.attr("circularRevealScrimColor", arg);
  }

  public static Void collapsedTitleGravity(int arg) {
    return BaseDSL.attr("collapsedTitleGravity", arg);
  }

  public static Void collapsedTitleTextAppearance(int arg) {
    return BaseDSL.attr("collapsedTitleTextAppearance", arg);
  }

  public static Void collapsedTitleTextColor(@NonNull ColorStateList arg) {
    return BaseDSL.attr("collapsedTitleTextColor", arg);
  }

  public static Void collapsedTitleTextColor(int arg) {
    return BaseDSL.attr("collapsedTitleTextColor", arg);
  }

  public static Void collapsedTitleTypeface(@Nullable Typeface arg) {
    return BaseDSL.attr("collapsedTitleTypeface", arg);
  }

  public static Void compatElevation(float arg) {
    return BaseDSL.attr("compatElevation", arg);
  }

  public static Void compatElevationResource(int arg) {
    return BaseDSL.attr("compatElevationResource", arg);
  }

  public static Void compatHoveredFocusedTranslationZ(float arg) {
    return BaseDSL.attr("compatHoveredFocusedTranslationZ", arg);
  }

  public static Void compatHoveredFocusedTranslationZResource(int arg) {
    return BaseDSL.attr("compatHoveredFocusedTranslationZResource", arg);
  }

  public static Void compatPressedTranslationZ(float arg) {
    return BaseDSL.attr("compatPressedTranslationZ", arg);
  }

  public static Void compatPressedTranslationZResource(int arg) {
    return BaseDSL.attr("compatPressedTranslationZResource", arg);
  }

  public static Void contentScrim(@Nullable Drawable arg) {
    return BaseDSL.attr("contentScrim", arg);
  }

  public static Void contentScrimColor(int arg) {
    return BaseDSL.attr("contentScrimColor", arg);
  }

  public static Void contentScrimResource(int arg) {
    return BaseDSL.attr("contentScrimResource", arg);
  }

  public static Void cornerRadius(int arg) {
    return BaseDSL.attr("cornerRadius", arg);
  }

  public static Void cornerRadiusResource(int arg) {
    return BaseDSL.attr("cornerRadiusResource", arg);
  }

  public static Void counterEnabled(boolean arg) {
    return BaseDSL.attr("counterEnabled", arg);
  }

  public static Void counterMaxLength(int arg) {
    return BaseDSL.attr("counterMaxLength", arg);
  }

  public static Void cradleVerticalOffset(float arg) {
    return BaseDSL.attr("cradleVerticalOffset", arg);
  }

  public static Void customSize(int arg) {
    return BaseDSL.attr("customSize", arg);
  }

  public static Void defaultHintTextColor(@Nullable ColorStateList arg) {
    return BaseDSL.attr("defaultHintTextColor", arg);
  }

  public static Void error(@Nullable CharSequence arg) {
    return BaseDSL.attr("error", arg);
  }

  public static Void errorEnabled(boolean arg) {
    return BaseDSL.attr("errorEnabled", arg);
  }

  public static Void errorTextAppearance(int arg) {
    return BaseDSL.attr("errorTextAppearance", arg);
  }

  public static Void errorTextColor(@Nullable ColorStateList arg) {
    return BaseDSL.attr("errorTextColor", arg);
  }

  public static Void expanded(boolean arg) {
    return BaseDSL.attr("expanded", arg);
  }

  public static Void expandedComponentIdHint(int arg) {
    return BaseDSL.attr("expandedComponentIdHint", arg);
  }

  public static Void expandedTitleColor(int arg) {
    return BaseDSL.attr("expandedTitleColor", arg);
  }

  public static Void expandedTitleGravity(int arg) {
    return BaseDSL.attr("expandedTitleGravity", arg);
  }

  public static Void expandedTitleMarginBottom(int arg) {
    return BaseDSL.attr("expandedTitleMarginBottom", arg);
  }

  public static Void expandedTitleMarginEnd(int arg) {
    return BaseDSL.attr("expandedTitleMarginEnd", arg);
  }

  public static Void expandedTitleMarginStart(int arg) {
    return BaseDSL.attr("expandedTitleMarginStart", arg);
  }

  public static Void expandedTitleMarginTop(int arg) {
    return BaseDSL.attr("expandedTitleMarginTop", arg);
  }

  public static Void expandedTitleTextAppearance(int arg) {
    return BaseDSL.attr("expandedTitleTextAppearance", arg);
  }

  public static Void expandedTitleTextColor(@NonNull ColorStateList arg) {
    return BaseDSL.attr("expandedTitleTextColor", arg);
  }

  public static Void expandedTitleTypeface(@Nullable Typeface arg) {
    return BaseDSL.attr("expandedTitleTypeface", arg);
  }

  public static Void fabAlignmentMode(int arg) {
    return BaseDSL.attr("fabAlignmentMode", arg);
  }

  public static Void fabCradleMargin(float arg) {
    return BaseDSL.attr("fabCradleMargin", arg);
  }

  public static Void fabCradleRoundedCornerRadius(float arg) {
    return BaseDSL.attr("fabCradleRoundedCornerRadius", arg);
  }

  public static Void helperText(@Nullable CharSequence arg) {
    return BaseDSL.attr("helperText", arg);
  }

  public static Void helperTextColor(@Nullable ColorStateList arg) {
    return BaseDSL.attr("helperTextColor", arg);
  }

  public static Void helperTextEnabled(boolean arg) {
    return BaseDSL.attr("helperTextEnabled", arg);
  }

  public static Void helperTextTextAppearance(int arg) {
    return BaseDSL.attr("helperTextTextAppearance", arg);
  }

  public static Void hideMotionSpec(MotionSpec arg) {
    return BaseDSL.attr("hideMotionSpec", arg);
  }

  public static Void hideMotionSpecResource(int arg) {
    return BaseDSL.attr("hideMotionSpecResource", arg);
  }

  public static Void hideOnScroll(boolean arg) {
    return BaseDSL.attr("hideOnScroll", arg);
  }

  public static Void hint(@Nullable CharSequence arg) {
    return BaseDSL.attr("hint", arg);
  }

  public static Void hintAnimationEnabled(boolean arg) {
    return BaseDSL.attr("hintAnimationEnabled", arg);
  }

  public static Void hintEnabled(boolean arg) {
    return BaseDSL.attr("hintEnabled", arg);
  }

  public static Void hintTextAppearance(int arg) {
    return BaseDSL.attr("hintTextAppearance", arg);
  }

  public static Void horizontalPadding(int arg) {
    return BaseDSL.attr("horizontalPadding", arg);
  }

  public static Void icon(Drawable arg) {
    return BaseDSL.attr("icon", arg);
  }

  public static Void iconGravity(int arg) {
    return BaseDSL.attr("iconGravity", arg);
  }

  public static Void iconPadding(int arg) {
    return BaseDSL.attr("iconPadding", arg);
  }

  public static Void iconResource(int arg) {
    return BaseDSL.attr("iconResource", arg);
  }

  public static Void iconSize(int arg) {
    return BaseDSL.attr("iconSize", arg);
  }

  public static Void iconTint(@Nullable ColorStateList arg) {
    return BaseDSL.attr("iconTint", arg);
  }

  public static Void iconTintList(ColorStateList arg) {
    return BaseDSL.attr("iconTintList", arg);
  }

  public static Void iconTintMode(PorterDuff.Mode arg) {
    return BaseDSL.attr("iconTintMode", arg);
  }

  public static Void iconTintResource(int arg) {
    return BaseDSL.attr("iconTintResource", arg);
  }

  public static Void inlineLabel(boolean arg) {
    return BaseDSL.attr("inlineLabel", arg);
  }

  public static Void inlineLabelResource(int arg) {
    return BaseDSL.attr("inlineLabelResource", arg);
  }

  public static Void itemBackground(@Nullable Drawable arg) {
    return BaseDSL.attr("itemBackground", arg);
  }

  public static Void itemBackground(int arg) {
    return BaseDSL.attr("itemBackground", arg);
  }

  public static Void itemBackgroundRes(int arg) {
    return BaseDSL.attr("itemBackgroundRes", arg);
  }

  public static Void itemBackgroundResource(int arg) {
    return BaseDSL.attr("itemBackgroundResource", arg);
  }

  public static Void itemHorizontalPadding(int arg) {
    return BaseDSL.attr("itemHorizontalPadding", arg);
  }

  public static Void itemHorizontalPaddingResource(int arg) {
    return BaseDSL.attr("itemHorizontalPaddingResource", arg);
  }

  public static Void itemHorizontalTranslationEnabled(boolean arg) {
    return BaseDSL.attr("itemHorizontalTranslationEnabled", arg);
  }

  public static Void itemIconPadding(int arg) {
    return BaseDSL.attr("itemIconPadding", arg);
  }

  public static Void itemIconPaddingResource(int arg) {
    return BaseDSL.attr("itemIconPaddingResource", arg);
  }

  public static Void itemIconSize(int arg) {
    return BaseDSL.attr("itemIconSize", arg);
  }

  public static Void itemIconSizeRes(int arg) {
    return BaseDSL.attr("itemIconSizeRes", arg);
  }

  public static Void itemIconTintList(@Nullable ColorStateList arg) {
    return BaseDSL.attr("itemIconTintList", arg);
  }

  public static Void itemPosition(int arg) {
    return BaseDSL.attr("itemPosition", arg);
  }

  public static Void itemTextAppearance(int arg) {
    return BaseDSL.attr("itemTextAppearance", arg);
  }

  public static Void itemTextAppearanceActive(int arg) {
    return BaseDSL.attr("itemTextAppearanceActive", arg);
  }

  public static Void itemTextAppearanceInactive(int arg) {
    return BaseDSL.attr("itemTextAppearanceInactive", arg);
  }

  public static Void itemTextColor(ColorStateList arg) {
    return BaseDSL.attr("itemTextColor", arg);
  }

  public static Void labelVisibilityMode(int arg) {
    return BaseDSL.attr("labelVisibilityMode", arg);
  }

  public static Void liftOnScroll(boolean arg) {
    return BaseDSL.attr("liftOnScroll", arg);
  }

  public static Void liftable(boolean arg) {
    return BaseDSL.attr("liftable", arg);
  }

  public static Void lifted(boolean arg) {
    return BaseDSL.attr("lifted", arg);
  }

  public static Void navigationItemSelectedListener(NavigationView.OnNavigationItemSelectedListener arg) {
    return BaseDSL.attr("navigationItemSelectedListener", arg);
  }

  public static Void needsEmptyIcon(boolean arg) {
    return BaseDSL.attr("needsEmptyIcon", arg);
  }

  public static Void onCheckedChange(ChipGroup.OnCheckedChangeListener arg) {
    return BaseDSL.attr("onCheckedChange", arg);
  }

  public static Void onNavigationItemReselected(BottomNavigationView.OnNavigationItemReselectedListener arg) {
    return BaseDSL.attr("onNavigationItemReselected", arg);
  }

  public static Void onNavigationItemSelected(BottomNavigationView.OnNavigationItemSelectedListener arg) {
    return BaseDSL.attr("onNavigationItemSelected", arg);
  }

  public static Void passwordVisibilityToggleContentDescription(int arg) {
    return BaseDSL.attr("passwordVisibilityToggleContentDescription", arg);
  }

  public static Void passwordVisibilityToggleContentDescription(@Nullable CharSequence arg) {
    return BaseDSL.attr("passwordVisibilityToggleContentDescription", arg);
  }

  public static Void passwordVisibilityToggleDrawable(@Nullable Drawable arg) {
    return BaseDSL.attr("passwordVisibilityToggleDrawable", arg);
  }

  public static Void passwordVisibilityToggleDrawable(int arg) {
    return BaseDSL.attr("passwordVisibilityToggleDrawable", arg);
  }

  public static Void passwordVisibilityToggleEnabled(boolean arg) {
    return BaseDSL.attr("passwordVisibilityToggleEnabled", arg);
  }

  public static Void passwordVisibilityToggleTintList(@Nullable ColorStateList arg) {
    return BaseDSL.attr("passwordVisibilityToggleTintList", arg);
  }

  public static Void passwordVisibilityToggleTintMode(PorterDuff.Mode arg) {
    return BaseDSL.attr("passwordVisibilityToggleTintMode", arg);
  }

  public static Void presenter(BottomNavigationPresenter arg) {
    return BaseDSL.attr("presenter", arg);
  }

  public static Void revealInfo(CircularRevealWidget.RevealInfo arg) {
    return BaseDSL.attr("revealInfo", arg);
  }

  public static Void rippleColor(@Nullable ColorStateList arg) {
    return BaseDSL.attr("rippleColor", arg);
  }

  public static Void rippleColor(int arg) {
    return BaseDSL.attr("rippleColor", arg);
  }

  public static Void rippleColorResource(int arg) {
    return BaseDSL.attr("rippleColorResource", arg);
  }

  public static Void scrimAnimationDuration(long arg) {
    return BaseDSL.attr("scrimAnimationDuration", arg);
  }

  public static Void scrimVisibleHeightTrigger(int arg) {
    return BaseDSL.attr("scrimVisibleHeightTrigger", arg);
  }

  public static Void scrimsShown(boolean arg) {
    return BaseDSL.attr("scrimsShown", arg);
  }

  public static Void selectedItemId(int arg) {
    return BaseDSL.attr("selectedItemId", arg);
  }

  public static Void selectedTabIndicator(@Nullable Drawable arg) {
    return BaseDSL.attr("selectedTabIndicator", arg);
  }

  public static Void selectedTabIndicator(int arg) {
    return BaseDSL.attr("selectedTabIndicator", arg);
  }

  public static Void selectedTabIndicatorColor(int arg) {
    return BaseDSL.attr("selectedTabIndicatorColor", arg);
  }

  public static Void selectedTabIndicatorGravity(int arg) {
    return BaseDSL.attr("selectedTabIndicatorGravity", arg);
  }

  public static Void shifting(boolean arg) {
    return BaseDSL.attr("shifting", arg);
  }

  public static Void showMotionSpec(MotionSpec arg) {
    return BaseDSL.attr("showMotionSpec", arg);
  }

  public static Void showMotionSpecResource(int arg) {
    return BaseDSL.attr("showMotionSpecResource", arg);
  }

  public static Void singleLine(boolean arg) {
    return BaseDSL.attr("singleLine", arg);
  }

  public static Void singleLine(int arg) {
    return BaseDSL.attr("singleLine", arg);
  }

  public static Void singleSelection(boolean arg) {
    return BaseDSL.attr("singleSelection", arg);
  }

  public static Void singleSelection(int arg) {
    return BaseDSL.attr("singleSelection", arg);
  }

  public static Void size(int arg) {
    return BaseDSL.attr("size", arg);
  }

  public static Void statusBarScrim(@Nullable Drawable arg) {
    return BaseDSL.attr("statusBarScrim", arg);
  }

  public static Void statusBarScrimColor(int arg) {
    return BaseDSL.attr("statusBarScrimColor", arg);
  }

  public static Void statusBarScrimResource(int arg) {
    return BaseDSL.attr("statusBarScrimResource", arg);
  }

  public static Void strokeColor(@Nullable ColorStateList arg) {
    return BaseDSL.attr("strokeColor", arg);
  }

  public static Void strokeColor(int arg) {
    return BaseDSL.attr("strokeColor", arg);
  }

  public static Void strokeColorResource(int arg) {
    return BaseDSL.attr("strokeColorResource", arg);
  }

  public static Void strokeWidth(int arg) {
    return BaseDSL.attr("strokeWidth", arg);
  }

  public static Void strokeWidthResource(int arg) {
    return BaseDSL.attr("strokeWidthResource", arg);
  }

  public static Void supportBackgroundTintList(@Nullable ColorStateList arg) {
    return BaseDSL.attr("supportBackgroundTintList", arg);
  }

  public static Void supportBackgroundTintMode(PorterDuff.Mode arg) {
    return BaseDSL.attr("supportBackgroundTintMode", arg);
  }

  public static Void supportImageTintList(@Nullable ColorStateList arg) {
    return BaseDSL.attr("supportImageTintList", arg);
  }

  public static Void supportImageTintMode(PorterDuff.Mode arg) {
    return BaseDSL.attr("supportImageTintMode", arg);
  }

  public static Void tabGravity(int arg) {
    return BaseDSL.attr("tabGravity", arg);
  }

  public static Void tabIconTint(@Nullable ColorStateList arg) {
    return BaseDSL.attr("tabIconTint", arg);
  }

  public static Void tabIconTintResource(int arg) {
    return BaseDSL.attr("tabIconTintResource", arg);
  }

  public static Void tabIndicatorFullWidth(boolean arg) {
    return BaseDSL.attr("tabIndicatorFullWidth", arg);
  }

  public static Void tabMode(int arg) {
    return BaseDSL.attr("tabMode", arg);
  }

  public static Void tabRippleColor(ColorStateList arg) {
    return BaseDSL.attr("tabRippleColor", arg);
  }

  public static Void tabRippleColorResource(int arg) {
    return BaseDSL.attr("tabRippleColorResource", arg);
  }

  public static Void tabTextColors(@Nullable ColorStateList arg) {
    return BaseDSL.attr("tabTextColors", arg);
  }

  public static Void textAppearance(int arg) {
    return BaseDSL.attr("textAppearance", arg);
  }

  public static Void textAppearanceActive(int arg) {
    return BaseDSL.attr("textAppearanceActive", arg);
  }

  public static Void textAppearanceInactive(int arg) {
    return BaseDSL.attr("textAppearanceInactive", arg);
  }

  public static Void textColor(@Nullable ColorStateList arg) {
    return BaseDSL.attr("textColor", arg);
  }

  public static Void textInputAccessibilityDelegate(TextInputLayout.AccessibilityDelegate arg) {
    return BaseDSL.attr("textInputAccessibilityDelegate", arg);
  }

  public static Void title(@Nullable CharSequence arg) {
    return BaseDSL.attr("title", arg);
  }

  public static Void titleEnabled(boolean arg) {
    return BaseDSL.attr("titleEnabled", arg);
  }

  public static Void typeface(@Nullable Typeface arg) {
    return BaseDSL.attr("typeface", arg);
  }

  public static Void unboundedRipple(boolean arg) {
    return BaseDSL.attr("unboundedRipple", arg);
  }

  public static Void unboundedRippleResource(int arg) {
    return BaseDSL.attr("unboundedRippleResource", arg);
  }

  public static Void upWithViewPager(@Nullable ViewPager arg) {
    return BaseDSL.attr("upWithViewPager", arg);
  }

  public static Void useCompatPadding(boolean arg) {
    return BaseDSL.attr("useCompatPadding", arg);
  }

  public boolean set(View v, String name, final Object arg, final Object old) {
    switch (name) {
      case "backgroundTint":
        if (v instanceof BottomAppBar && (arg == null || arg instanceof ColorStateList)) {
          ((BottomAppBar) v).setBackgroundTint((ColorStateList) arg);
          return true;
        }
        break;
      case "boxBackgroundColor":
        if (v instanceof TextInputLayout && arg instanceof Integer) {
          ((TextInputLayout) v).setBoxBackgroundColor((int) arg);
          return true;
        }
        break;
      case "boxBackgroundColorResource":
        if (v instanceof TextInputLayout && arg instanceof Integer) {
          ((TextInputLayout) v).setBoxBackgroundColorResource((int) arg);
          return true;
        }
        break;
      case "boxBackgroundMode":
        if (v instanceof TextInputLayout && arg instanceof Integer) {
          ((TextInputLayout) v).setBoxBackgroundMode((int) arg);
          return true;
        }
        break;
      case "boxStrokeColor":
        if (v instanceof TextInputLayout && arg instanceof Integer) {
          ((TextInputLayout) v).setBoxStrokeColor((int) arg);
          return true;
        }
        break;
      case "checkable":
        if (v instanceof BottomNavigationItemView && arg instanceof Boolean) {
          ((BottomNavigationItemView) v).setCheckable((boolean) arg);
          return true;
        }
        if (v instanceof NavigationMenuItemView && arg instanceof Boolean) {
          ((NavigationMenuItemView) v).setCheckable((boolean) arg);
          return true;
        }
        break;
      case "checked":
        if (v instanceof BottomNavigationItemView && arg instanceof Boolean) {
          ((BottomNavigationItemView) v).setChecked((boolean) arg);
          return true;
        }
        if (v instanceof CheckableImageButton && arg instanceof Boolean) {
          ((CheckableImageButton) v).setChecked((boolean) arg);
          return true;
        }
        if (v instanceof NavigationMenuItemView && arg instanceof Boolean) {
          ((NavigationMenuItemView) v).setChecked((boolean) arg);
          return true;
        }
        break;
      case "checkedItem":
        if (v instanceof NavigationView && arg instanceof MenuItem) {
          ((NavigationView) v).setCheckedItem((MenuItem) arg);
          return true;
        }
        if (v instanceof NavigationView && arg instanceof Integer) {
          ((NavigationView) v).setCheckedItem((int) arg);
          return true;
        }
        break;
      case "chipSpacing":
        if (v instanceof ChipGroup && arg instanceof Integer) {
          ((ChipGroup) v).setChipSpacing((int) arg);
          return true;
        }
        break;
      case "chipSpacingHorizontal":
        if (v instanceof ChipGroup && arg instanceof Integer) {
          ((ChipGroup) v).setChipSpacingHorizontal((int) arg);
          return true;
        }
        break;
      case "chipSpacingHorizontalResource":
        if (v instanceof ChipGroup && arg instanceof Integer) {
          ((ChipGroup) v).setChipSpacingHorizontalResource((int) arg);
          return true;
        }
        break;
      case "chipSpacingResource":
        if (v instanceof ChipGroup && arg instanceof Integer) {
          ((ChipGroup) v).setChipSpacingResource((int) arg);
          return true;
        }
        break;
      case "chipSpacingVertical":
        if (v instanceof ChipGroup && arg instanceof Integer) {
          ((ChipGroup) v).setChipSpacingVertical((int) arg);
          return true;
        }
        break;
      case "chipSpacingVerticalResource":
        if (v instanceof ChipGroup && arg instanceof Integer) {
          ((ChipGroup) v).setChipSpacingVerticalResource((int) arg);
          return true;
        }
        break;
      case "circularRevealOverlayDrawable":
        if (v instanceof CircularRevealFrameLayout && (arg == null || arg instanceof Drawable)) {
          ((CircularRevealFrameLayout) v).setCircularRevealOverlayDrawable((Drawable) arg);
          return true;
        }
        if (v instanceof CircularRevealGridLayout && (arg == null || arg instanceof Drawable)) {
          ((CircularRevealGridLayout) v).setCircularRevealOverlayDrawable((Drawable) arg);
          return true;
        }
        if (v instanceof CircularRevealLinearLayout && (arg == null || arg instanceof Drawable)) {
          ((CircularRevealLinearLayout) v).setCircularRevealOverlayDrawable((Drawable) arg);
          return true;
        }
        if (v instanceof CircularRevealRelativeLayout && (arg == null || arg instanceof Drawable)) {
          ((CircularRevealRelativeLayout) v).setCircularRevealOverlayDrawable((Drawable) arg);
          return true;
        }
        if (v instanceof CircularRevealCardView && (arg == null || arg instanceof Drawable)) {
          ((CircularRevealCardView) v).setCircularRevealOverlayDrawable((Drawable) arg);
          return true;
        }
        if (v instanceof CircularRevealCoordinatorLayout && (arg == null || arg instanceof Drawable)) {
          ((CircularRevealCoordinatorLayout) v).setCircularRevealOverlayDrawable((Drawable) arg);
          return true;
        }
        break;
      case "circularRevealScrimColor":
        if (v instanceof CircularRevealFrameLayout && arg instanceof Integer) {
          ((CircularRevealFrameLayout) v).setCircularRevealScrimColor((int) arg);
          return true;
        }
        if (v instanceof CircularRevealGridLayout && arg instanceof Integer) {
          ((CircularRevealGridLayout) v).setCircularRevealScrimColor((int) arg);
          return true;
        }
        if (v instanceof CircularRevealLinearLayout && arg instanceof Integer) {
          ((CircularRevealLinearLayout) v).setCircularRevealScrimColor((int) arg);
          return true;
        }
        if (v instanceof CircularRevealRelativeLayout && arg instanceof Integer) {
          ((CircularRevealRelativeLayout) v).setCircularRevealScrimColor((int) arg);
          return true;
        }
        if (v instanceof CircularRevealCardView && arg instanceof Integer) {
          ((CircularRevealCardView) v).setCircularRevealScrimColor((int) arg);
          return true;
        }
        if (v instanceof CircularRevealCoordinatorLayout && arg instanceof Integer) {
          ((CircularRevealCoordinatorLayout) v).setCircularRevealScrimColor((int) arg);
          return true;
        }
        break;
      case "collapsedTitleGravity":
        if (v instanceof CollapsingToolbarLayout && arg instanceof Integer) {
          ((CollapsingToolbarLayout) v).setCollapsedTitleGravity((int) arg);
          return true;
        }
        break;
      case "collapsedTitleTextAppearance":
        if (v instanceof CollapsingToolbarLayout && arg instanceof Integer) {
          ((CollapsingToolbarLayout) v).setCollapsedTitleTextAppearance((int) arg);
          return true;
        }
        break;
      case "collapsedTitleTextColor":
        if (v instanceof CollapsingToolbarLayout && arg instanceof ColorStateList) {
          ((CollapsingToolbarLayout) v).setCollapsedTitleTextColor((ColorStateList) arg);
          return true;
        }
        if (v instanceof CollapsingToolbarLayout && arg instanceof Integer) {
          ((CollapsingToolbarLayout) v).setCollapsedTitleTextColor((int) arg);
          return true;
        }
        break;
      case "collapsedTitleTypeface":
        if (v instanceof CollapsingToolbarLayout && (arg == null || arg instanceof Typeface)) {
          ((CollapsingToolbarLayout) v).setCollapsedTitleTypeface((Typeface) arg);
          return true;
        }
        break;
      case "compatElevation":
        if (v instanceof FloatingActionButton && arg instanceof Float) {
          ((FloatingActionButton) v).setCompatElevation((float) arg);
          return true;
        }
        break;
      case "compatElevationResource":
        if (v instanceof FloatingActionButton && arg instanceof Integer) {
          ((FloatingActionButton) v).setCompatElevationResource((int) arg);
          return true;
        }
        break;
      case "compatHoveredFocusedTranslationZ":
        if (v instanceof FloatingActionButton && arg instanceof Float) {
          ((FloatingActionButton) v).setCompatHoveredFocusedTranslationZ((float) arg);
          return true;
        }
        break;
      case "compatHoveredFocusedTranslationZResource":
        if (v instanceof FloatingActionButton && arg instanceof Integer) {
          ((FloatingActionButton) v).setCompatHoveredFocusedTranslationZResource((int) arg);
          return true;
        }
        break;
      case "compatPressedTranslationZ":
        if (v instanceof FloatingActionButton && arg instanceof Float) {
          ((FloatingActionButton) v).setCompatPressedTranslationZ((float) arg);
          return true;
        }
        break;
      case "compatPressedTranslationZResource":
        if (v instanceof FloatingActionButton && arg instanceof Integer) {
          ((FloatingActionButton) v).setCompatPressedTranslationZResource((int) arg);
          return true;
        }
        break;
      case "contentScrim":
        if (v instanceof CollapsingToolbarLayout && (arg == null || arg instanceof Drawable)) {
          ((CollapsingToolbarLayout) v).setContentScrim((Drawable) arg);
          return true;
        }
        break;
      case "contentScrimColor":
        if (v instanceof CollapsingToolbarLayout && arg instanceof Integer) {
          ((CollapsingToolbarLayout) v).setContentScrimColor((int) arg);
          return true;
        }
        break;
      case "contentScrimResource":
        if (v instanceof CollapsingToolbarLayout && arg instanceof Integer) {
          ((CollapsingToolbarLayout) v).setContentScrimResource((int) arg);
          return true;
        }
        break;
      case "cornerRadius":
        if (v instanceof MaterialButton && arg instanceof Integer) {
          ((MaterialButton) v).setCornerRadius((int) arg);
          return true;
        }
        break;
      case "cornerRadiusResource":
        if (v instanceof MaterialButton && arg instanceof Integer) {
          ((MaterialButton) v).setCornerRadiusResource((int) arg);
          return true;
        }
        break;
      case "counterEnabled":
        if (v instanceof TextInputLayout && arg instanceof Boolean) {
          ((TextInputLayout) v).setCounterEnabled((boolean) arg);
          return true;
        }
        break;
      case "counterMaxLength":
        if (v instanceof TextInputLayout && arg instanceof Integer) {
          ((TextInputLayout) v).setCounterMaxLength((int) arg);
          return true;
        }
        break;
      case "cradleVerticalOffset":
        if (v instanceof BottomAppBar && arg instanceof Float) {
          ((BottomAppBar) v).setCradleVerticalOffset((float) arg);
          return true;
        }
        break;
      case "customSize":
        if (v instanceof FloatingActionButton && arg instanceof Integer) {
          ((FloatingActionButton) v).setCustomSize((int) arg);
          return true;
        }
        break;
      case "defaultHintTextColor":
        if (v instanceof TextInputLayout && (arg == null || arg instanceof ColorStateList)) {
          ((TextInputLayout) v).setDefaultHintTextColor((ColorStateList) arg);
          return true;
        }
        break;
      case "error":
        if (v instanceof TextInputLayout && (arg == null || arg instanceof CharSequence)) {
          ((TextInputLayout) v).setError((CharSequence) arg);
          return true;
        }
        break;
      case "errorEnabled":
        if (v instanceof TextInputLayout && arg instanceof Boolean) {
          ((TextInputLayout) v).setErrorEnabled((boolean) arg);
          return true;
        }
        break;
      case "errorTextAppearance":
        if (v instanceof TextInputLayout && arg instanceof Integer) {
          ((TextInputLayout) v).setErrorTextAppearance((int) arg);
          return true;
        }
        break;
      case "errorTextColor":
        if (v instanceof TextInputLayout && (arg == null || arg instanceof ColorStateList)) {
          ((TextInputLayout) v).setErrorTextColor((ColorStateList) arg);
          return true;
        }
        break;
      case "expanded":
        if (v instanceof AppBarLayout && arg instanceof Boolean) {
          ((AppBarLayout) v).setExpanded((boolean) arg);
          return true;
        }
        if (v instanceof FloatingActionButton && arg instanceof Boolean) {
          ((FloatingActionButton) v).setExpanded((boolean) arg);
          return true;
        }
        break;
      case "expandedComponentIdHint":
        if (v instanceof FloatingActionButton && arg instanceof Integer) {
          ((FloatingActionButton) v).setExpandedComponentIdHint((int) arg);
          return true;
        }
        break;
      case "expandedTitleColor":
        if (v instanceof CollapsingToolbarLayout && arg instanceof Integer) {
          ((CollapsingToolbarLayout) v).setExpandedTitleColor((int) arg);
          return true;
        }
        break;
      case "expandedTitleGravity":
        if (v instanceof CollapsingToolbarLayout && arg instanceof Integer) {
          ((CollapsingToolbarLayout) v).setExpandedTitleGravity((int) arg);
          return true;
        }
        break;
      case "expandedTitleMarginBottom":
        if (v instanceof CollapsingToolbarLayout && arg instanceof Integer) {
          ((CollapsingToolbarLayout) v).setExpandedTitleMarginBottom((int) arg);
          return true;
        }
        break;
      case "expandedTitleMarginEnd":
        if (v instanceof CollapsingToolbarLayout && arg instanceof Integer) {
          ((CollapsingToolbarLayout) v).setExpandedTitleMarginEnd((int) arg);
          return true;
        }
        break;
      case "expandedTitleMarginStart":
        if (v instanceof CollapsingToolbarLayout && arg instanceof Integer) {
          ((CollapsingToolbarLayout) v).setExpandedTitleMarginStart((int) arg);
          return true;
        }
        break;
      case "expandedTitleMarginTop":
        if (v instanceof CollapsingToolbarLayout && arg instanceof Integer) {
          ((CollapsingToolbarLayout) v).setExpandedTitleMarginTop((int) arg);
          return true;
        }
        break;
      case "expandedTitleTextAppearance":
        if (v instanceof CollapsingToolbarLayout && arg instanceof Integer) {
          ((CollapsingToolbarLayout) v).setExpandedTitleTextAppearance((int) arg);
          return true;
        }
        break;
      case "expandedTitleTextColor":
        if (v instanceof CollapsingToolbarLayout && arg instanceof ColorStateList) {
          ((CollapsingToolbarLayout) v).setExpandedTitleTextColor((ColorStateList) arg);
          return true;
        }
        break;
      case "expandedTitleTypeface":
        if (v instanceof CollapsingToolbarLayout && (arg == null || arg instanceof Typeface)) {
          ((CollapsingToolbarLayout) v).setExpandedTitleTypeface((Typeface) arg);
          return true;
        }
        break;
      case "fabAlignmentMode":
        if (v instanceof BottomAppBar && arg instanceof Integer) {
          ((BottomAppBar) v).setFabAlignmentMode((int) arg);
          return true;
        }
        break;
      case "fabCradleMargin":
        if (v instanceof BottomAppBar && arg instanceof Float) {
          ((BottomAppBar) v).setFabCradleMargin((float) arg);
          return true;
        }
        break;
      case "fabCradleRoundedCornerRadius":
        if (v instanceof BottomAppBar && arg instanceof Float) {
          ((BottomAppBar) v).setFabCradleRoundedCornerRadius((float) arg);
          return true;
        }
        break;
      case "helperText":
        if (v instanceof TextInputLayout && (arg == null || arg instanceof CharSequence)) {
          ((TextInputLayout) v).setHelperText((CharSequence) arg);
          return true;
        }
        break;
      case "helperTextColor":
        if (v instanceof TextInputLayout && (arg == null || arg instanceof ColorStateList)) {
          ((TextInputLayout) v).setHelperTextColor((ColorStateList) arg);
          return true;
        }
        break;
      case "helperTextEnabled":
        if (v instanceof TextInputLayout && arg instanceof Boolean) {
          ((TextInputLayout) v).setHelperTextEnabled((boolean) arg);
          return true;
        }
        break;
      case "helperTextTextAppearance":
        if (v instanceof TextInputLayout && arg instanceof Integer) {
          ((TextInputLayout) v).setHelperTextTextAppearance((int) arg);
          return true;
        }
        break;
      case "hideMotionSpec":
        if (v instanceof FloatingActionButton && arg instanceof MotionSpec) {
          ((FloatingActionButton) v).setHideMotionSpec((MotionSpec) arg);
          return true;
        }
        break;
      case "hideMotionSpecResource":
        if (v instanceof FloatingActionButton && arg instanceof Integer) {
          ((FloatingActionButton) v).setHideMotionSpecResource((int) arg);
          return true;
        }
        break;
      case "hideOnScroll":
        if (v instanceof BottomAppBar && arg instanceof Boolean) {
          ((BottomAppBar) v).setHideOnScroll((boolean) arg);
          return true;
        }
        break;
      case "hint":
        if (v instanceof TextInputLayout && (arg == null || arg instanceof CharSequence)) {
          ((TextInputLayout) v).setHint((CharSequence) arg);
          return true;
        }
        break;
      case "hintAnimationEnabled":
        if (v instanceof TextInputLayout && arg instanceof Boolean) {
          ((TextInputLayout) v).setHintAnimationEnabled((boolean) arg);
          return true;
        }
        break;
      case "hintEnabled":
        if (v instanceof TextInputLayout && arg instanceof Boolean) {
          ((TextInputLayout) v).setHintEnabled((boolean) arg);
          return true;
        }
        break;
      case "hintTextAppearance":
        if (v instanceof TextInputLayout && arg instanceof Integer) {
          ((TextInputLayout) v).setHintTextAppearance((int) arg);
          return true;
        }
        break;
      case "horizontalPadding":
        if (v instanceof NavigationMenuItemView && arg instanceof Integer) {
          ((NavigationMenuItemView) v).setHorizontalPadding((int) arg);
          return true;
        }
        break;
      case "icon":
        if (v instanceof BottomNavigationItemView && arg instanceof Drawable) {
          ((BottomNavigationItemView) v).setIcon((Drawable) arg);
          return true;
        }
        if (v instanceof MaterialButton && arg instanceof Drawable) {
          ((MaterialButton) v).setIcon((Drawable) arg);
          return true;
        }
        if (v instanceof NavigationMenuItemView && arg instanceof Drawable) {
          ((NavigationMenuItemView) v).setIcon((Drawable) arg);
          return true;
        }
        break;
      case "iconGravity":
        if (v instanceof MaterialButton && arg instanceof Integer) {
          ((MaterialButton) v).setIconGravity((int) arg);
          return true;
        }
        break;
      case "iconPadding":
        if (v instanceof MaterialButton && arg instanceof Integer) {
          ((MaterialButton) v).setIconPadding((int) arg);
          return true;
        }
        if (v instanceof NavigationMenuItemView && arg instanceof Integer) {
          ((NavigationMenuItemView) v).setIconPadding((int) arg);
          return true;
        }
        break;
      case "iconResource":
        if (v instanceof MaterialButton && arg instanceof Integer) {
          ((MaterialButton) v).setIconResource((int) arg);
          return true;
        }
        break;
      case "iconSize":
        if (v instanceof BottomNavigationItemView && arg instanceof Integer) {
          ((BottomNavigationItemView) v).setIconSize((int) arg);
          return true;
        }
        if (v instanceof MaterialButton && arg instanceof Integer) {
          ((MaterialButton) v).setIconSize((int) arg);
          return true;
        }
        break;
      case "iconTint":
        if (v instanceof MaterialButton && (arg == null || arg instanceof ColorStateList)) {
          ((MaterialButton) v).setIconTint((ColorStateList) arg);
          return true;
        }
        break;
      case "iconTintList":
        if (v instanceof BottomNavigationItemView && arg instanceof ColorStateList) {
          ((BottomNavigationItemView) v).setIconTintList((ColorStateList) arg);
          return true;
        }
        if (v instanceof BottomNavigationMenuView && arg instanceof ColorStateList) {
          ((BottomNavigationMenuView) v).setIconTintList((ColorStateList) arg);
          return true;
        }
        break;
      case "iconTintMode":
        if (v instanceof MaterialButton && arg instanceof PorterDuff.Mode) {
          ((MaterialButton) v).setIconTintMode((PorterDuff.Mode) arg);
          return true;
        }
        break;
      case "iconTintResource":
        if (v instanceof MaterialButton && arg instanceof Integer) {
          ((MaterialButton) v).setIconTintResource((int) arg);
          return true;
        }
        break;
      case "inlineLabel":
        if (v instanceof TabLayout && arg instanceof Boolean) {
          ((TabLayout) v).setInlineLabel((boolean) arg);
          return true;
        }
        break;
      case "inlineLabelResource":
        if (v instanceof TabLayout && arg instanceof Integer) {
          ((TabLayout) v).setInlineLabelResource((int) arg);
          return true;
        }
        break;
      case "itemBackground":
        if (v instanceof BottomNavigationItemView && (arg == null || arg instanceof Drawable)) {
          ((BottomNavigationItemView) v).setItemBackground((Drawable) arg);
          return true;
        }
        if (v instanceof BottomNavigationMenuView && arg instanceof Drawable) {
          ((BottomNavigationMenuView) v).setItemBackground((Drawable) arg);
          return true;
        }
        if (v instanceof BottomNavigationView && (arg == null || arg instanceof Drawable)) {
          ((BottomNavigationView) v).setItemBackground((Drawable) arg);
          return true;
        }
        if (v instanceof NavigationView && (arg == null || arg instanceof Drawable)) {
          ((NavigationView) v).setItemBackground((Drawable) arg);
          return true;
        }
        if (v instanceof BottomNavigationItemView && arg instanceof Integer) {
          ((BottomNavigationItemView) v).setItemBackground((int) arg);
          return true;
        }
        break;
      case "itemBackgroundRes":
        if (v instanceof BottomNavigationMenuView && arg instanceof Integer) {
          ((BottomNavigationMenuView) v).setItemBackgroundRes((int) arg);
          return true;
        }
        break;
      case "itemBackgroundResource":
        if (v instanceof BottomNavigationView && arg instanceof Integer) {
          ((BottomNavigationView) v).setItemBackgroundResource((int) arg);
          return true;
        }
        if (v instanceof NavigationView && arg instanceof Integer) {
          ((NavigationView) v).setItemBackgroundResource((int) arg);
          return true;
        }
        break;
      case "itemHorizontalPadding":
        if (v instanceof NavigationView && arg instanceof Integer) {
          ((NavigationView) v).setItemHorizontalPadding((int) arg);
          return true;
        }
        break;
      case "itemHorizontalPaddingResource":
        if (v instanceof NavigationView && arg instanceof Integer) {
          ((NavigationView) v).setItemHorizontalPaddingResource((int) arg);
          return true;
        }
        break;
      case "itemHorizontalTranslationEnabled":
        if (v instanceof BottomNavigationMenuView && arg instanceof Boolean) {
          ((BottomNavigationMenuView) v).setItemHorizontalTranslationEnabled((boolean) arg);
          return true;
        }
        if (v instanceof BottomNavigationView && arg instanceof Boolean) {
          ((BottomNavigationView) v).setItemHorizontalTranslationEnabled((boolean) arg);
          return true;
        }
        break;
      case "itemIconPadding":
        if (v instanceof NavigationView && arg instanceof Integer) {
          ((NavigationView) v).setItemIconPadding((int) arg);
          return true;
        }
        break;
      case "itemIconPaddingResource":
        if (v instanceof NavigationView && arg instanceof Integer) {
          ((NavigationView) v).setItemIconPaddingResource((int) arg);
          return true;
        }
        break;
      case "itemIconSize":
        if (v instanceof BottomNavigationMenuView && arg instanceof Integer) {
          ((BottomNavigationMenuView) v).setItemIconSize((int) arg);
          return true;
        }
        if (v instanceof BottomNavigationView && arg instanceof Integer) {
          ((BottomNavigationView) v).setItemIconSize((int) arg);
          return true;
        }
        break;
      case "itemIconSizeRes":
        if (v instanceof BottomNavigationView && arg instanceof Integer) {
          ((BottomNavigationView) v).setItemIconSizeRes((int) arg);
          return true;
        }
        break;
      case "itemIconTintList":
        if (v instanceof BottomNavigationView && (arg == null || arg instanceof ColorStateList)) {
          ((BottomNavigationView) v).setItemIconTintList((ColorStateList) arg);
          return true;
        }
        if (v instanceof NavigationView && (arg == null || arg instanceof ColorStateList)) {
          ((NavigationView) v).setItemIconTintList((ColorStateList) arg);
          return true;
        }
        break;
      case "itemPosition":
        if (v instanceof BottomNavigationItemView && arg instanceof Integer) {
          ((BottomNavigationItemView) v).setItemPosition((int) arg);
          return true;
        }
        break;
      case "itemTextAppearance":
        if (v instanceof NavigationView && arg instanceof Integer) {
          ((NavigationView) v).setItemTextAppearance((int) arg);
          return true;
        }
        break;
      case "itemTextAppearanceActive":
        if (v instanceof BottomNavigationMenuView && arg instanceof Integer) {
          ((BottomNavigationMenuView) v).setItemTextAppearanceActive((int) arg);
          return true;
        }
        if (v instanceof BottomNavigationView && arg instanceof Integer) {
          ((BottomNavigationView) v).setItemTextAppearanceActive((int) arg);
          return true;
        }
        break;
      case "itemTextAppearanceInactive":
        if (v instanceof BottomNavigationMenuView && arg instanceof Integer) {
          ((BottomNavigationMenuView) v).setItemTextAppearanceInactive((int) arg);
          return true;
        }
        if (v instanceof BottomNavigationView && arg instanceof Integer) {
          ((BottomNavigationView) v).setItemTextAppearanceInactive((int) arg);
          return true;
        }
        break;
      case "itemTextColor":
        if (v instanceof BottomNavigationMenuView && arg instanceof ColorStateList) {
          ((BottomNavigationMenuView) v).setItemTextColor((ColorStateList) arg);
          return true;
        }
        if (v instanceof BottomNavigationView && (arg == null || arg instanceof ColorStateList)) {
          ((BottomNavigationView) v).setItemTextColor((ColorStateList) arg);
          return true;
        }
        if (v instanceof NavigationView && (arg == null || arg instanceof ColorStateList)) {
          ((NavigationView) v).setItemTextColor((ColorStateList) arg);
          return true;
        }
        break;
      case "labelVisibilityMode":
        if (v instanceof BottomNavigationItemView && arg instanceof Integer) {
          ((BottomNavigationItemView) v).setLabelVisibilityMode((int) arg);
          return true;
        }
        if (v instanceof BottomNavigationMenuView && arg instanceof Integer) {
          ((BottomNavigationMenuView) v).setLabelVisibilityMode((int) arg);
          return true;
        }
        if (v instanceof BottomNavigationView && arg instanceof Integer) {
          ((BottomNavigationView) v).setLabelVisibilityMode((int) arg);
          return true;
        }
        break;
      case "liftOnScroll":
        if (v instanceof AppBarLayout && arg instanceof Boolean) {
          ((AppBarLayout) v).setLiftOnScroll((boolean) arg);
          return true;
        }
        break;
      case "liftable":
        if (v instanceof AppBarLayout && arg instanceof Boolean) {
          ((AppBarLayout) v).setLiftable((boolean) arg);
          return true;
        }
        break;
      case "lifted":
        if (v instanceof AppBarLayout && arg instanceof Boolean) {
          ((AppBarLayout) v).setLifted((boolean) arg);
          return true;
        }
        break;
      case "navigationItemSelectedListener":
        if (v instanceof NavigationView && (arg == null || arg instanceof NavigationView.OnNavigationItemSelectedListener)) {
          ((NavigationView) v).setNavigationItemSelectedListener((NavigationView.OnNavigationItemSelectedListener) arg);
          return true;
        }
        break;
      case "needsEmptyIcon":
        if (v instanceof NavigationMenuItemView && arg instanceof Boolean) {
          ((NavigationMenuItemView) v).setNeedsEmptyIcon((boolean) arg);
          return true;
        }
        break;
      case "onCheckedChange":
        if (v instanceof ChipGroup && arg instanceof ChipGroup.OnCheckedChangeListener) {
          if (arg != null) {
            ((ChipGroup) v).setOnCheckedChangeListener(new ChipGroup.OnCheckedChangeListener() {
              public void onCheckedChanged(ChipGroup a0, int a1) {
                ((ChipGroup.OnCheckedChangeListener) arg).onCheckedChanged(a0, a1);
                Anvil.render();
              }
            });
          } else {
            ((ChipGroup) v).setOnCheckedChangeListener((ChipGroup.OnCheckedChangeListener) null);
          }
          return true;
        }
        break;
      case "onNavigationItemReselected":
        if (v instanceof BottomNavigationView && arg instanceof BottomNavigationView.OnNavigationItemReselectedListener) {
          if (arg != null) {
            ((BottomNavigationView) v).setOnNavigationItemReselectedListener(new BottomNavigationView.OnNavigationItemReselectedListener() {
              public void onNavigationItemReselected(MenuItem a0) {
                ((BottomNavigationView.OnNavigationItemReselectedListener) arg).onNavigationItemReselected(a0);
                Anvil.render();
              }
            });
          } else {
            ((BottomNavigationView) v).setOnNavigationItemReselectedListener((BottomNavigationView.OnNavigationItemReselectedListener) null);
          }
          return true;
        }
        break;
      case "onNavigationItemSelected":
        if (v instanceof BottomNavigationView && arg instanceof BottomNavigationView.OnNavigationItemSelectedListener) {
          if (arg != null) {
            ((BottomNavigationView) v).setOnNavigationItemSelectedListener(new BottomNavigationView.OnNavigationItemSelectedListener() {
              public boolean onNavigationItemSelected(MenuItem a0) {
                boolean r = ((BottomNavigationView.OnNavigationItemSelectedListener) arg).onNavigationItemSelected(a0);
                Anvil.render();
                return r;
              }
            });
          } else {
            ((BottomNavigationView) v).setOnNavigationItemSelectedListener((BottomNavigationView.OnNavigationItemSelectedListener) null);
          }
          return true;
        }
        break;
      case "passwordVisibilityToggleContentDescription":
        if (v instanceof TextInputLayout && arg instanceof Integer) {
          ((TextInputLayout) v).setPasswordVisibilityToggleContentDescription((int) arg);
          return true;
        }
        if (v instanceof TextInputLayout && (arg == null || arg instanceof CharSequence)) {
          ((TextInputLayout) v).setPasswordVisibilityToggleContentDescription((CharSequence) arg);
          return true;
        }
        break;
      case "passwordVisibilityToggleDrawable":
        if (v instanceof TextInputLayout && (arg == null || arg instanceof Drawable)) {
          ((TextInputLayout) v).setPasswordVisibilityToggleDrawable((Drawable) arg);
          return true;
        }
        if (v instanceof TextInputLayout && arg instanceof Integer) {
          ((TextInputLayout) v).setPasswordVisibilityToggleDrawable((int) arg);
          return true;
        }
        break;
      case "passwordVisibilityToggleEnabled":
        if (v instanceof TextInputLayout && arg instanceof Boolean) {
          ((TextInputLayout) v).setPasswordVisibilityToggleEnabled((boolean) arg);
          return true;
        }
        break;
      case "passwordVisibilityToggleTintList":
        if (v instanceof TextInputLayout && (arg == null || arg instanceof ColorStateList)) {
          ((TextInputLayout) v).setPasswordVisibilityToggleTintList((ColorStateList) arg);
          return true;
        }
        break;
      case "passwordVisibilityToggleTintMode":
        if (v instanceof TextInputLayout && (arg == null || arg instanceof PorterDuff.Mode)) {
          ((TextInputLayout) v).setPasswordVisibilityToggleTintMode((PorterDuff.Mode) arg);
          return true;
        }
        break;
      case "presenter":
        if (v instanceof BottomNavigationMenuView && arg instanceof BottomNavigationPresenter) {
          ((BottomNavigationMenuView) v).setPresenter((BottomNavigationPresenter) arg);
          return true;
        }
        break;
      case "revealInfo":
        if (v instanceof CircularRevealFrameLayout && (arg == null || arg instanceof CircularRevealWidget.RevealInfo)) {
          ((CircularRevealFrameLayout) v).setRevealInfo((CircularRevealWidget.RevealInfo) arg);
          return true;
        }
        if (v instanceof CircularRevealGridLayout && (arg == null || arg instanceof CircularRevealWidget.RevealInfo)) {
          ((CircularRevealGridLayout) v).setRevealInfo((CircularRevealWidget.RevealInfo) arg);
          return true;
        }
        if (v instanceof CircularRevealLinearLayout && (arg == null || arg instanceof CircularRevealWidget.RevealInfo)) {
          ((CircularRevealLinearLayout) v).setRevealInfo((CircularRevealWidget.RevealInfo) arg);
          return true;
        }
        if (v instanceof CircularRevealRelativeLayout && (arg == null || arg instanceof CircularRevealWidget.RevealInfo)) {
          ((CircularRevealRelativeLayout) v).setRevealInfo((CircularRevealWidget.RevealInfo) arg);
          return true;
        }
        if (v instanceof CircularRevealCardView && (arg == null || arg instanceof CircularRevealWidget.RevealInfo)) {
          ((CircularRevealCardView) v).setRevealInfo((CircularRevealWidget.RevealInfo) arg);
          return true;
        }
        if (v instanceof CircularRevealCoordinatorLayout && (arg == null || arg instanceof CircularRevealWidget.RevealInfo)) {
          ((CircularRevealCoordinatorLayout) v).setRevealInfo((CircularRevealWidget.RevealInfo) arg);
          return true;
        }
        break;
      case "rippleColor":
        if (v instanceof MaterialButton && (arg == null || arg instanceof ColorStateList)) {
          ((MaterialButton) v).setRippleColor((ColorStateList) arg);
          return true;
        }
        if (v instanceof FloatingActionButton && (arg == null || arg instanceof ColorStateList)) {
          ((FloatingActionButton) v).setRippleColor((ColorStateList) arg);
          return true;
        }
        if (v instanceof FloatingActionButton && arg instanceof Integer) {
          ((FloatingActionButton) v).setRippleColor((int) arg);
          return true;
        }
        break;
      case "rippleColorResource":
        if (v instanceof MaterialButton && arg instanceof Integer) {
          ((MaterialButton) v).setRippleColorResource((int) arg);
          return true;
        }
        break;
      case "scrimAnimationDuration":
        if (v instanceof CollapsingToolbarLayout && arg instanceof Long) {
          ((CollapsingToolbarLayout) v).setScrimAnimationDuration((long) arg);
          return true;
        }
        break;
      case "scrimVisibleHeightTrigger":
        if (v instanceof CollapsingToolbarLayout && arg instanceof Integer) {
          ((CollapsingToolbarLayout) v).setScrimVisibleHeightTrigger((int) arg);
          return true;
        }
        break;
      case "scrimsShown":
        if (v instanceof CollapsingToolbarLayout && arg instanceof Boolean) {
          ((CollapsingToolbarLayout) v).setScrimsShown((boolean) arg);
          return true;
        }
        break;
      case "selectedItemId":
        if (v instanceof BottomNavigationView && arg instanceof Integer) {
          ((BottomNavigationView) v).setSelectedItemId((int) arg);
          return true;
        }
        break;
      case "selectedTabIndicator":
        if (v instanceof TabLayout && (arg == null || arg instanceof Drawable)) {
          ((TabLayout) v).setSelectedTabIndicator((Drawable) arg);
          return true;
        }
        if (v instanceof TabLayout && arg instanceof Integer) {
          ((TabLayout) v).setSelectedTabIndicator((int) arg);
          return true;
        }
        break;
      case "selectedTabIndicatorColor":
        if (v instanceof TabLayout && arg instanceof Integer) {
          ((TabLayout) v).setSelectedTabIndicatorColor((int) arg);
          return true;
        }
        break;
      case "selectedTabIndicatorGravity":
        if (v instanceof TabLayout && arg instanceof Integer) {
          ((TabLayout) v).setSelectedTabIndicatorGravity((int) arg);
          return true;
        }
        break;
      case "shifting":
        if (v instanceof BottomNavigationItemView && arg instanceof Boolean) {
          ((BottomNavigationItemView) v).setShifting((boolean) arg);
          return true;
        }
        break;
      case "showMotionSpec":
        if (v instanceof FloatingActionButton && arg instanceof MotionSpec) {
          ((FloatingActionButton) v).setShowMotionSpec((MotionSpec) arg);
          return true;
        }
        break;
      case "showMotionSpecResource":
        if (v instanceof FloatingActionButton && arg instanceof Integer) {
          ((FloatingActionButton) v).setShowMotionSpecResource((int) arg);
          return true;
        }
        break;
      case "singleLine":
        if (v instanceof FlowLayout && arg instanceof Boolean) {
          ((FlowLayout) v).setSingleLine((boolean) arg);
          return true;
        }
        if (v instanceof ChipGroup && arg instanceof Integer) {
          ((ChipGroup) v).setSingleLine((int) arg);
          return true;
        }
        break;
      case "singleSelection":
        if (v instanceof ChipGroup && arg instanceof Boolean) {
          ((ChipGroup) v).setSingleSelection((boolean) arg);
          return true;
        }
        if (v instanceof ChipGroup && arg instanceof Integer) {
          ((ChipGroup) v).setSingleSelection((int) arg);
          return true;
        }
        break;
      case "size":
        if (v instanceof FloatingActionButton && arg instanceof Integer) {
          ((FloatingActionButton) v).setSize((int) arg);
          return true;
        }
        break;
      case "statusBarScrim":
        if (v instanceof CollapsingToolbarLayout && (arg == null || arg instanceof Drawable)) {
          ((CollapsingToolbarLayout) v).setStatusBarScrim((Drawable) arg);
          return true;
        }
        break;
      case "statusBarScrimColor":
        if (v instanceof CollapsingToolbarLayout && arg instanceof Integer) {
          ((CollapsingToolbarLayout) v).setStatusBarScrimColor((int) arg);
          return true;
        }
        break;
      case "statusBarScrimResource":
        if (v instanceof CollapsingToolbarLayout && arg instanceof Integer) {
          ((CollapsingToolbarLayout) v).setStatusBarScrimResource((int) arg);
          return true;
        }
        break;
      case "strokeColor":
        if (v instanceof MaterialButton && (arg == null || arg instanceof ColorStateList)) {
          ((MaterialButton) v).setStrokeColor((ColorStateList) arg);
          return true;
        }
        if (v instanceof MaterialCardView && arg instanceof Integer) {
          ((MaterialCardView) v).setStrokeColor((int) arg);
          return true;
        }
        break;
      case "strokeColorResource":
        if (v instanceof MaterialButton && arg instanceof Integer) {
          ((MaterialButton) v).setStrokeColorResource((int) arg);
          return true;
        }
        break;
      case "strokeWidth":
        if (v instanceof MaterialButton && arg instanceof Integer) {
          ((MaterialButton) v).setStrokeWidth((int) arg);
          return true;
        }
        if (v instanceof MaterialCardView && arg instanceof Integer) {
          ((MaterialCardView) v).setStrokeWidth((int) arg);
          return true;
        }
        break;
      case "strokeWidthResource":
        if (v instanceof MaterialButton && arg instanceof Integer) {
          ((MaterialButton) v).setStrokeWidthResource((int) arg);
          return true;
        }
        break;
      case "supportBackgroundTintList":
        if (v instanceof FloatingActionButton && (arg == null || arg instanceof ColorStateList)) {
          ((FloatingActionButton) v).setSupportBackgroundTintList((ColorStateList) arg);
          return true;
        }
        break;
      case "supportBackgroundTintMode":
        if (v instanceof FloatingActionButton && (arg == null || arg instanceof PorterDuff.Mode)) {
          ((FloatingActionButton) v).setSupportBackgroundTintMode((PorterDuff.Mode) arg);
          return true;
        }
        break;
      case "supportImageTintList":
        if (v instanceof FloatingActionButton && (arg == null || arg instanceof ColorStateList)) {
          ((FloatingActionButton) v).setSupportImageTintList((ColorStateList) arg);
          return true;
        }
        break;
      case "supportImageTintMode":
        if (v instanceof FloatingActionButton && (arg == null || arg instanceof PorterDuff.Mode)) {
          ((FloatingActionButton) v).setSupportImageTintMode((PorterDuff.Mode) arg);
          return true;
        }
        break;
      case "tabGravity":
        if (v instanceof TabLayout && arg instanceof Integer) {
          ((TabLayout) v).setTabGravity((int) arg);
          return true;
        }
        break;
      case "tabIconTint":
        if (v instanceof TabLayout && (arg == null || arg instanceof ColorStateList)) {
          ((TabLayout) v).setTabIconTint((ColorStateList) arg);
          return true;
        }
        break;
      case "tabIconTintResource":
        if (v instanceof TabLayout && arg instanceof Integer) {
          ((TabLayout) v).setTabIconTintResource((int) arg);
          return true;
        }
        break;
      case "tabIndicatorFullWidth":
        if (v instanceof TabLayout && arg instanceof Boolean) {
          ((TabLayout) v).setTabIndicatorFullWidth((boolean) arg);
          return true;
        }
        break;
      case "tabMode":
        if (v instanceof TabLayout && arg instanceof Integer) {
          ((TabLayout) v).setTabMode((int) arg);
          return true;
        }
        break;
      case "tabRippleColor":
        if (v instanceof TabLayout && arg instanceof ColorStateList) {
          ((TabLayout) v).setTabRippleColor((ColorStateList) arg);
          return true;
        }
        break;
      case "tabRippleColorResource":
        if (v instanceof TabLayout && arg instanceof Integer) {
          ((TabLayout) v).setTabRippleColorResource((int) arg);
          return true;
        }
        break;
      case "tabTextColors":
        if (v instanceof TabLayout && (arg == null || arg instanceof ColorStateList)) {
          ((TabLayout) v).setTabTextColors((ColorStateList) arg);
          return true;
        }
        break;
      case "textAppearance":
        if (v instanceof NavigationMenuItemView && arg instanceof Integer) {
          ((NavigationMenuItemView) v).setTextAppearance((int) arg);
          return true;
        }
        break;
      case "textAppearanceActive":
        if (v instanceof BottomNavigationItemView && arg instanceof Integer) {
          ((BottomNavigationItemView) v).setTextAppearanceActive((int) arg);
          return true;
        }
        break;
      case "textAppearanceInactive":
        if (v instanceof BottomNavigationItemView && arg instanceof Integer) {
          ((BottomNavigationItemView) v).setTextAppearanceInactive((int) arg);
          return true;
        }
        break;
      case "textColor":
        if (v instanceof BottomNavigationItemView && (arg == null || arg instanceof ColorStateList)) {
          ((BottomNavigationItemView) v).setTextColor((ColorStateList) arg);
          return true;
        }
        if (v instanceof NavigationMenuItemView && arg instanceof ColorStateList) {
          ((NavigationMenuItemView) v).setTextColor((ColorStateList) arg);
          return true;
        }
        break;
      case "textInputAccessibilityDelegate":
        if (v instanceof TextInputLayout && arg instanceof TextInputLayout.AccessibilityDelegate) {
          ((TextInputLayout) v).setTextInputAccessibilityDelegate((TextInputLayout.AccessibilityDelegate) arg);
          return true;
        }
        break;
      case "title":
        if (v instanceof CollapsingToolbarLayout && (arg == null || arg instanceof CharSequence)) {
          ((CollapsingToolbarLayout) v).setTitle((CharSequence) arg);
          return true;
        }
        if (v instanceof BottomNavigationItemView && arg instanceof CharSequence) {
          ((BottomNavigationItemView) v).setTitle((CharSequence) arg);
          return true;
        }
        if (v instanceof NavigationMenuItemView && arg instanceof CharSequence) {
          ((NavigationMenuItemView) v).setTitle((CharSequence) arg);
          return true;
        }
        break;
      case "titleEnabled":
        if (v instanceof CollapsingToolbarLayout && arg instanceof Boolean) {
          ((CollapsingToolbarLayout) v).setTitleEnabled((boolean) arg);
          return true;
        }
        break;
      case "typeface":
        if (v instanceof TextInputLayout && (arg == null || arg instanceof Typeface)) {
          ((TextInputLayout) v).setTypeface((Typeface) arg);
          return true;
        }
        break;
      case "unboundedRipple":
        if (v instanceof TabLayout && arg instanceof Boolean) {
          ((TabLayout) v).setUnboundedRipple((boolean) arg);
          return true;
        }
        break;
      case "unboundedRippleResource":
        if (v instanceof TabLayout && arg instanceof Integer) {
          ((TabLayout) v).setUnboundedRippleResource((int) arg);
          return true;
        }
        break;
      case "upWithViewPager":
        if (v instanceof TabLayout && (arg == null || arg instanceof ViewPager)) {
          ((TabLayout) v).setupWithViewPager((ViewPager) arg);
          return true;
        }
        break;
      case "useCompatPadding":
        if (v instanceof FloatingActionButton && arg instanceof Boolean) {
          ((FloatingActionButton) v).setUseCompatPadding((boolean) arg);
          return true;
        }
        break;
    }
    return false;
  }
}
