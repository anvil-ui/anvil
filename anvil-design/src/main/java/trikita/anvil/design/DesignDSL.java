package trikita.anvil.design;

import android.content.res.ColorStateList;
import android.graphics.PorterDuff;
import android.graphics.Typeface;
import android.graphics.drawable.Drawable;
import android.support.design.internal.BaselineLayout;
import android.support.design.internal.BottomNavigationItemView;
import android.support.design.internal.BottomNavigationMenuView;
import android.support.design.internal.BottomNavigationPresenter;
import android.support.design.internal.ForegroundLinearLayout;
import android.support.design.internal.NavigationMenuItemView;
import android.support.design.internal.NavigationMenuView;
import android.support.design.internal.ScrimInsetsFrameLayout;
import android.support.design.internal.SnackbarContentLayout;
import android.support.design.widget.AppBarLayout;
import android.support.design.widget.BottomNavigationView;
import android.support.design.widget.CheckableImageButton;
import android.support.design.widget.CollapsingToolbarLayout;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.NavigationView;
import android.support.design.widget.TabItem;
import android.support.design.widget.TabLayout;
import android.support.design.widget.TextInputEditText;
import android.support.design.widget.TextInputLayout;
import android.support.v4.view.ViewPager;
import android.view.MenuItem;
import android.view.View;
import java.lang.Boolean;
import java.lang.CharSequence;
import java.lang.Float;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.String;
import java.lang.Void;
import trikita.anvil.Anvil;
import trikita.anvil.BaseDSL;

/**
 * DSL for creating views and settings their attributes.
 * This file has been generated by {@code gradle generateDesignDSL}.
 * It contains views and their setters from the library design.
 * Please, don't edit it manually unless for debugging.
 */
public final class DesignDSL implements Anvil.AttributeSetter {
  static {
    Anvil.registerAttributeSetter(new DesignDSL());
  }

  public static BaseDSL.ViewClassResult baselineLayout() {
    return BaseDSL.v(BaselineLayout.class);
  }

  public static Void baselineLayout(Anvil.Renderable r) {
    return BaseDSL.v(BaselineLayout.class, r);
  }

  public static BaseDSL.ViewClassResult bottomNavigationItemView() {
    return BaseDSL.v(BottomNavigationItemView.class);
  }

  public static Void bottomNavigationItemView(Anvil.Renderable r) {
    return BaseDSL.v(BottomNavigationItemView.class, r);
  }

  public static BaseDSL.ViewClassResult bottomNavigationMenuView() {
    return BaseDSL.v(BottomNavigationMenuView.class);
  }

  public static Void bottomNavigationMenuView(Anvil.Renderable r) {
    return BaseDSL.v(BottomNavigationMenuView.class, r);
  }

  public static BaseDSL.ViewClassResult foregroundLinearLayout() {
    return BaseDSL.v(ForegroundLinearLayout.class);
  }

  public static Void foregroundLinearLayout(Anvil.Renderable r) {
    return BaseDSL.v(ForegroundLinearLayout.class, r);
  }

  public static BaseDSL.ViewClassResult navigationMenuItemView() {
    return BaseDSL.v(NavigationMenuItemView.class);
  }

  public static Void navigationMenuItemView(Anvil.Renderable r) {
    return BaseDSL.v(NavigationMenuItemView.class, r);
  }

  public static BaseDSL.ViewClassResult navigationMenuView() {
    return BaseDSL.v(NavigationMenuView.class);
  }

  public static Void navigationMenuView(Anvil.Renderable r) {
    return BaseDSL.v(NavigationMenuView.class, r);
  }

  public static BaseDSL.ViewClassResult scrimInsetsFrameLayout() {
    return BaseDSL.v(ScrimInsetsFrameLayout.class);
  }

  public static Void scrimInsetsFrameLayout(Anvil.Renderable r) {
    return BaseDSL.v(ScrimInsetsFrameLayout.class, r);
  }

  public static BaseDSL.ViewClassResult snackbarContentLayout() {
    return BaseDSL.v(SnackbarContentLayout.class);
  }

  public static Void snackbarContentLayout(Anvil.Renderable r) {
    return BaseDSL.v(SnackbarContentLayout.class, r);
  }

  public static BaseDSL.ViewClassResult appBarLayout() {
    return BaseDSL.v(AppBarLayout.class);
  }

  public static Void appBarLayout(Anvil.Renderable r) {
    return BaseDSL.v(AppBarLayout.class, r);
  }

  public static BaseDSL.ViewClassResult bottomNavigationView() {
    return BaseDSL.v(BottomNavigationView.class);
  }

  public static Void bottomNavigationView(Anvil.Renderable r) {
    return BaseDSL.v(BottomNavigationView.class, r);
  }

  public static BaseDSL.ViewClassResult checkableImageButton() {
    return BaseDSL.v(CheckableImageButton.class);
  }

  public static Void checkableImageButton(Anvil.Renderable r) {
    return BaseDSL.v(CheckableImageButton.class, r);
  }

  public static BaseDSL.ViewClassResult collapsingToolbarLayout() {
    return BaseDSL.v(CollapsingToolbarLayout.class);
  }

  public static Void collapsingToolbarLayout(Anvil.Renderable r) {
    return BaseDSL.v(CollapsingToolbarLayout.class, r);
  }

  public static BaseDSL.ViewClassResult floatingActionButton() {
    return BaseDSL.v(FloatingActionButton.class);
  }

  public static Void floatingActionButton(Anvil.Renderable r) {
    return BaseDSL.v(FloatingActionButton.class, r);
  }

  public static BaseDSL.ViewClassResult navigationView() {
    return BaseDSL.v(NavigationView.class);
  }

  public static Void navigationView(Anvil.Renderable r) {
    return BaseDSL.v(NavigationView.class, r);
  }

  public static BaseDSL.ViewClassResult tabItem() {
    return BaseDSL.v(TabItem.class);
  }

  public static Void tabItem(Anvil.Renderable r) {
    return BaseDSL.v(TabItem.class, r);
  }

  public static BaseDSL.ViewClassResult tabLayout() {
    return BaseDSL.v(TabLayout.class);
  }

  public static Void tabLayout(Anvil.Renderable r) {
    return BaseDSL.v(TabLayout.class, r);
  }

  public static BaseDSL.ViewClassResult textInputEditText() {
    return BaseDSL.v(TextInputEditText.class);
  }

  public static Void textInputEditText(Anvil.Renderable r) {
    return BaseDSL.v(TextInputEditText.class, r);
  }

  public static BaseDSL.ViewClassResult textInputLayout() {
    return BaseDSL.v(TextInputLayout.class);
  }

  public static Void textInputLayout(Anvil.Renderable r) {
    return BaseDSL.v(TextInputLayout.class, r);
  }

  public static Void checkable(boolean arg) {
    return BaseDSL.attr("checkable", arg);
  }

  public static Void checked(boolean arg) {
    return BaseDSL.attr("checked", arg);
  }

  public static Void checkedItem(int arg) {
    return BaseDSL.attr("checkedItem", arg);
  }

  public static Void collapsedTitleGravity(int arg) {
    return BaseDSL.attr("collapsedTitleGravity", arg);
  }

  public static Void collapsedTitleTextAppearance(int arg) {
    return BaseDSL.attr("collapsedTitleTextAppearance", arg);
  }

  public static Void collapsedTitleTextColor(ColorStateList arg) {
    return BaseDSL.attr("collapsedTitleTextColor", arg);
  }

  public static Void collapsedTitleTextColor(int arg) {
    return BaseDSL.attr("collapsedTitleTextColor", arg);
  }

  public static Void collapsedTitleTypeface(Typeface arg) {
    return BaseDSL.attr("collapsedTitleTypeface", arg);
  }

  public static Void compatElevation(float arg) {
    return BaseDSL.attr("compatElevation", arg);
  }

  public static Void contentScrim(Drawable arg) {
    return BaseDSL.attr("contentScrim", arg);
  }

  public static Void contentScrimColor(int arg) {
    return BaseDSL.attr("contentScrimColor", arg);
  }

  public static Void contentScrimResource(int arg) {
    return BaseDSL.attr("contentScrimResource", arg);
  }

  public static Void counterEnabled(boolean arg) {
    return BaseDSL.attr("counterEnabled", arg);
  }

  public static Void counterMaxLength(int arg) {
    return BaseDSL.attr("counterMaxLength", arg);
  }

  public static Void customSize(int arg) {
    return BaseDSL.attr("customSize", arg);
  }

  public static Void error(CharSequence arg) {
    return BaseDSL.attr("error", arg);
  }

  public static Void errorEnabled(boolean arg) {
    return BaseDSL.attr("errorEnabled", arg);
  }

  public static Void errorTextAppearance(int arg) {
    return BaseDSL.attr("errorTextAppearance", arg);
  }

  public static Void expanded(boolean arg) {
    return BaseDSL.attr("expanded", arg);
  }

  public static Void expandedTitleColor(int arg) {
    return BaseDSL.attr("expandedTitleColor", arg);
  }

  public static Void expandedTitleGravity(int arg) {
    return BaseDSL.attr("expandedTitleGravity", arg);
  }

  public static Void expandedTitleMarginBottom(int arg) {
    return BaseDSL.attr("expandedTitleMarginBottom", arg);
  }

  public static Void expandedTitleMarginEnd(int arg) {
    return BaseDSL.attr("expandedTitleMarginEnd", arg);
  }

  public static Void expandedTitleMarginStart(int arg) {
    return BaseDSL.attr("expandedTitleMarginStart", arg);
  }

  public static Void expandedTitleMarginTop(int arg) {
    return BaseDSL.attr("expandedTitleMarginTop", arg);
  }

  public static Void expandedTitleTextAppearance(int arg) {
    return BaseDSL.attr("expandedTitleTextAppearance", arg);
  }

  public static Void expandedTitleTextColor(ColorStateList arg) {
    return BaseDSL.attr("expandedTitleTextColor", arg);
  }

  public static Void expandedTitleTypeface(Typeface arg) {
    return BaseDSL.attr("expandedTitleTypeface", arg);
  }

  public static Void hint(CharSequence arg) {
    return BaseDSL.attr("hint", arg);
  }

  public static Void hintAnimationEnabled(boolean arg) {
    return BaseDSL.attr("hintAnimationEnabled", arg);
  }

  public static Void hintEnabled(boolean arg) {
    return BaseDSL.attr("hintEnabled", arg);
  }

  public static Void hintTextAppearance(int arg) {
    return BaseDSL.attr("hintTextAppearance", arg);
  }

  public static Void icon(Drawable arg) {
    return BaseDSL.attr("icon", arg);
  }

  public static Void iconTintList(ColorStateList arg) {
    return BaseDSL.attr("iconTintList", arg);
  }

  public static Void itemBackground(Drawable arg) {
    return BaseDSL.attr("itemBackground", arg);
  }

  public static Void itemBackground(int arg) {
    return BaseDSL.attr("itemBackground", arg);
  }

  public static Void itemBackgroundRes(int arg) {
    return BaseDSL.attr("itemBackgroundRes", arg);
  }

  public static Void itemBackgroundResource(int arg) {
    return BaseDSL.attr("itemBackgroundResource", arg);
  }

  public static Void itemIconTintList(ColorStateList arg) {
    return BaseDSL.attr("itemIconTintList", arg);
  }

  public static Void itemPosition(int arg) {
    return BaseDSL.attr("itemPosition", arg);
  }

  public static Void itemTextAppearance(int arg) {
    return BaseDSL.attr("itemTextAppearance", arg);
  }

  public static Void itemTextColor(ColorStateList arg) {
    return BaseDSL.attr("itemTextColor", arg);
  }

  public static Void navigationItemSelectedListener(NavigationView.OnNavigationItemSelectedListener arg) {
    return BaseDSL.attr("navigationItemSelectedListener", arg);
  }

  public static Void needsEmptyIcon(boolean arg) {
    return BaseDSL.attr("needsEmptyIcon", arg);
  }

  public static Void onNavigationItemReselected(BottomNavigationView.OnNavigationItemReselectedListener arg) {
    return BaseDSL.attr("onNavigationItemReselected", arg);
  }

  public static Void onNavigationItemSelected(BottomNavigationView.OnNavigationItemSelectedListener arg) {
    return BaseDSL.attr("onNavigationItemSelected", arg);
  }

  public static Void passwordVisibilityToggleContentDescription(int arg) {
    return BaseDSL.attr("passwordVisibilityToggleContentDescription", arg);
  }

  public static Void passwordVisibilityToggleContentDescription(CharSequence arg) {
    return BaseDSL.attr("passwordVisibilityToggleContentDescription", arg);
  }

  public static Void passwordVisibilityToggleDrawable(Drawable arg) {
    return BaseDSL.attr("passwordVisibilityToggleDrawable", arg);
  }

  public static Void passwordVisibilityToggleDrawable(int arg) {
    return BaseDSL.attr("passwordVisibilityToggleDrawable", arg);
  }

  public static Void passwordVisibilityToggleEnabled(boolean arg) {
    return BaseDSL.attr("passwordVisibilityToggleEnabled", arg);
  }

  public static Void passwordVisibilityToggleTintList(ColorStateList arg) {
    return BaseDSL.attr("passwordVisibilityToggleTintList", arg);
  }

  public static Void passwordVisibilityToggleTintMode(PorterDuff.Mode arg) {
    return BaseDSL.attr("passwordVisibilityToggleTintMode", arg);
  }

  public static Void presenter(BottomNavigationPresenter arg) {
    return BaseDSL.attr("presenter", arg);
  }

  public static Void rippleColor(int arg) {
    return BaseDSL.attr("rippleColor", arg);
  }

  public static Void scrimAnimationDuration(long arg) {
    return BaseDSL.attr("scrimAnimationDuration", arg);
  }

  public static Void scrimVisibleHeightTrigger(int arg) {
    return BaseDSL.attr("scrimVisibleHeightTrigger", arg);
  }

  public static Void scrimsShown(boolean arg) {
    return BaseDSL.attr("scrimsShown", arg);
  }

  public static Void selectedItemId(int arg) {
    return BaseDSL.attr("selectedItemId", arg);
  }

  public static Void selectedTabIndicatorColor(int arg) {
    return BaseDSL.attr("selectedTabIndicatorColor", arg);
  }

  public static Void selectedTabIndicatorHeight(int arg) {
    return BaseDSL.attr("selectedTabIndicatorHeight", arg);
  }

  public static Void shiftingMode(boolean arg) {
    return BaseDSL.attr("shiftingMode", arg);
  }

  public static Void size(int arg) {
    return BaseDSL.attr("size", arg);
  }

  public static Void statusBarScrim(Drawable arg) {
    return BaseDSL.attr("statusBarScrim", arg);
  }

  public static Void statusBarScrimColor(int arg) {
    return BaseDSL.attr("statusBarScrimColor", arg);
  }

  public static Void statusBarScrimResource(int arg) {
    return BaseDSL.attr("statusBarScrimResource", arg);
  }

  public static Void tabGravity(int arg) {
    return BaseDSL.attr("tabGravity", arg);
  }

  public static Void tabMode(int arg) {
    return BaseDSL.attr("tabMode", arg);
  }

  public static Void tabTextColors(ColorStateList arg) {
    return BaseDSL.attr("tabTextColors", arg);
  }

  public static Void textAppearance(int arg) {
    return BaseDSL.attr("textAppearance", arg);
  }

  public static Void textColor(ColorStateList arg) {
    return BaseDSL.attr("textColor", arg);
  }

  public static Void title(CharSequence arg) {
    return BaseDSL.attr("title", arg);
  }

  public static Void titleEnabled(boolean arg) {
    return BaseDSL.attr("titleEnabled", arg);
  }

  public static Void typeface(Typeface arg) {
    return BaseDSL.attr("typeface", arg);
  }

  public static Void upWithViewPager(ViewPager arg) {
    return BaseDSL.attr("upWithViewPager", arg);
  }

  public static Void useCompatPadding(boolean arg) {
    return BaseDSL.attr("useCompatPadding", arg);
  }

  public boolean set(View v, String name, final Object arg, final Object old) {
    switch (name) {
      case "checkable":
        if (v instanceof BottomNavigationItemView && arg instanceof Boolean) {
          ((BottomNavigationItemView) v).setCheckable((boolean) arg);
          return true;
        }
        if (v instanceof NavigationMenuItemView && arg instanceof Boolean) {
          ((NavigationMenuItemView) v).setCheckable((boolean) arg);
          return true;
        }
        break;
      case "checked":
        if (v instanceof BottomNavigationItemView && arg instanceof Boolean) {
          ((BottomNavigationItemView) v).setChecked((boolean) arg);
          return true;
        }
        if (v instanceof NavigationMenuItemView && arg instanceof Boolean) {
          ((NavigationMenuItemView) v).setChecked((boolean) arg);
          return true;
        }
        if (v instanceof CheckableImageButton && arg instanceof Boolean) {
          ((CheckableImageButton) v).setChecked((boolean) arg);
          return true;
        }
        break;
      case "checkedItem":
        if (v instanceof NavigationView && arg instanceof Integer) {
          ((NavigationView) v).setCheckedItem((int) arg);
          return true;
        }
        break;
      case "collapsedTitleGravity":
        if (v instanceof CollapsingToolbarLayout && arg instanceof Integer) {
          ((CollapsingToolbarLayout) v).setCollapsedTitleGravity((int) arg);
          return true;
        }
        break;
      case "collapsedTitleTextAppearance":
        if (v instanceof CollapsingToolbarLayout && arg instanceof Integer) {
          ((CollapsingToolbarLayout) v).setCollapsedTitleTextAppearance((int) arg);
          return true;
        }
        break;
      case "collapsedTitleTextColor":
        if (v instanceof CollapsingToolbarLayout && arg instanceof ColorStateList) {
          ((CollapsingToolbarLayout) v).setCollapsedTitleTextColor((ColorStateList) arg);
          return true;
        }
        if (v instanceof CollapsingToolbarLayout && arg instanceof Integer) {
          ((CollapsingToolbarLayout) v).setCollapsedTitleTextColor((int) arg);
          return true;
        }
        break;
      case "collapsedTitleTypeface":
        if (v instanceof CollapsingToolbarLayout && arg instanceof Typeface) {
          ((CollapsingToolbarLayout) v).setCollapsedTitleTypeface((Typeface) arg);
          return true;
        }
        break;
      case "compatElevation":
        if (v instanceof FloatingActionButton && arg instanceof Float) {
          ((FloatingActionButton) v).setCompatElevation((float) arg);
          return true;
        }
        break;
      case "contentScrim":
        if (v instanceof CollapsingToolbarLayout && arg instanceof Drawable) {
          ((CollapsingToolbarLayout) v).setContentScrim((Drawable) arg);
          return true;
        }
        break;
      case "contentScrimColor":
        if (v instanceof CollapsingToolbarLayout && arg instanceof Integer) {
          ((CollapsingToolbarLayout) v).setContentScrimColor((int) arg);
          return true;
        }
        break;
      case "contentScrimResource":
        if (v instanceof CollapsingToolbarLayout && arg instanceof Integer) {
          ((CollapsingToolbarLayout) v).setContentScrimResource((int) arg);
          return true;
        }
        break;
      case "counterEnabled":
        if (v instanceof TextInputLayout && arg instanceof Boolean) {
          ((TextInputLayout) v).setCounterEnabled((boolean) arg);
          return true;
        }
        break;
      case "counterMaxLength":
        if (v instanceof TextInputLayout && arg instanceof Integer) {
          ((TextInputLayout) v).setCounterMaxLength((int) arg);
          return true;
        }
        break;
      case "customSize":
        if (v instanceof FloatingActionButton && arg instanceof Integer) {
          ((FloatingActionButton) v).setCustomSize((int) arg);
          return true;
        }
        break;
      case "error":
        if (v instanceof TextInputLayout && arg instanceof CharSequence) {
          ((TextInputLayout) v).setError((CharSequence) arg);
          return true;
        }
        break;
      case "errorEnabled":
        if (v instanceof TextInputLayout && arg instanceof Boolean) {
          ((TextInputLayout) v).setErrorEnabled((boolean) arg);
          return true;
        }
        break;
      case "errorTextAppearance":
        if (v instanceof TextInputLayout && arg instanceof Integer) {
          ((TextInputLayout) v).setErrorTextAppearance((int) arg);
          return true;
        }
        break;
      case "expanded":
        if (v instanceof AppBarLayout && arg instanceof Boolean) {
          ((AppBarLayout) v).setExpanded((boolean) arg);
          return true;
        }
        break;
      case "expandedTitleColor":
        if (v instanceof CollapsingToolbarLayout && arg instanceof Integer) {
          ((CollapsingToolbarLayout) v).setExpandedTitleColor((int) arg);
          return true;
        }
        break;
      case "expandedTitleGravity":
        if (v instanceof CollapsingToolbarLayout && arg instanceof Integer) {
          ((CollapsingToolbarLayout) v).setExpandedTitleGravity((int) arg);
          return true;
        }
        break;
      case "expandedTitleMarginBottom":
        if (v instanceof CollapsingToolbarLayout && arg instanceof Integer) {
          ((CollapsingToolbarLayout) v).setExpandedTitleMarginBottom((int) arg);
          return true;
        }
        break;
      case "expandedTitleMarginEnd":
        if (v instanceof CollapsingToolbarLayout && arg instanceof Integer) {
          ((CollapsingToolbarLayout) v).setExpandedTitleMarginEnd((int) arg);
          return true;
        }
        break;
      case "expandedTitleMarginStart":
        if (v instanceof CollapsingToolbarLayout && arg instanceof Integer) {
          ((CollapsingToolbarLayout) v).setExpandedTitleMarginStart((int) arg);
          return true;
        }
        break;
      case "expandedTitleMarginTop":
        if (v instanceof CollapsingToolbarLayout && arg instanceof Integer) {
          ((CollapsingToolbarLayout) v).setExpandedTitleMarginTop((int) arg);
          return true;
        }
        break;
      case "expandedTitleTextAppearance":
        if (v instanceof CollapsingToolbarLayout && arg instanceof Integer) {
          ((CollapsingToolbarLayout) v).setExpandedTitleTextAppearance((int) arg);
          return true;
        }
        break;
      case "expandedTitleTextColor":
        if (v instanceof CollapsingToolbarLayout && arg instanceof ColorStateList) {
          ((CollapsingToolbarLayout) v).setExpandedTitleTextColor((ColorStateList) arg);
          return true;
        }
        break;
      case "expandedTitleTypeface":
        if (v instanceof CollapsingToolbarLayout && arg instanceof Typeface) {
          ((CollapsingToolbarLayout) v).setExpandedTitleTypeface((Typeface) arg);
          return true;
        }
        break;
      case "hint":
        if (v instanceof TextInputLayout && arg instanceof CharSequence) {
          ((TextInputLayout) v).setHint((CharSequence) arg);
          return true;
        }
        break;
      case "hintAnimationEnabled":
        if (v instanceof TextInputLayout && arg instanceof Boolean) {
          ((TextInputLayout) v).setHintAnimationEnabled((boolean) arg);
          return true;
        }
        break;
      case "hintEnabled":
        if (v instanceof TextInputLayout && arg instanceof Boolean) {
          ((TextInputLayout) v).setHintEnabled((boolean) arg);
          return true;
        }
        break;
      case "hintTextAppearance":
        if (v instanceof TextInputLayout && arg instanceof Integer) {
          ((TextInputLayout) v).setHintTextAppearance((int) arg);
          return true;
        }
        break;
      case "icon":
        if (v instanceof BottomNavigationItemView && arg instanceof Drawable) {
          ((BottomNavigationItemView) v).setIcon((Drawable) arg);
          return true;
        }
        if (v instanceof NavigationMenuItemView && arg instanceof Drawable) {
          ((NavigationMenuItemView) v).setIcon((Drawable) arg);
          return true;
        }
        break;
      case "iconTintList":
        if (v instanceof BottomNavigationItemView && arg instanceof ColorStateList) {
          ((BottomNavigationItemView) v).setIconTintList((ColorStateList) arg);
          return true;
        }
        if (v instanceof BottomNavigationMenuView && arg instanceof ColorStateList) {
          ((BottomNavigationMenuView) v).setIconTintList((ColorStateList) arg);
          return true;
        }
        break;
      case "itemBackground":
        if (v instanceof NavigationView && arg instanceof Drawable) {
          ((NavigationView) v).setItemBackground((Drawable) arg);
          return true;
        }
        if (v instanceof BottomNavigationItemView && arg instanceof Integer) {
          ((BottomNavigationItemView) v).setItemBackground((int) arg);
          return true;
        }
        break;
      case "itemBackgroundRes":
        if (v instanceof BottomNavigationMenuView && arg instanceof Integer) {
          ((BottomNavigationMenuView) v).setItemBackgroundRes((int) arg);
          return true;
        }
        break;
      case "itemBackgroundResource":
        if (v instanceof BottomNavigationView && arg instanceof Integer) {
          ((BottomNavigationView) v).setItemBackgroundResource((int) arg);
          return true;
        }
        if (v instanceof NavigationView && arg instanceof Integer) {
          ((NavigationView) v).setItemBackgroundResource((int) arg);
          return true;
        }
        break;
      case "itemIconTintList":
        if (v instanceof BottomNavigationView && arg instanceof ColorStateList) {
          ((BottomNavigationView) v).setItemIconTintList((ColorStateList) arg);
          return true;
        }
        if (v instanceof NavigationView && arg instanceof ColorStateList) {
          ((NavigationView) v).setItemIconTintList((ColorStateList) arg);
          return true;
        }
        break;
      case "itemPosition":
        if (v instanceof BottomNavigationItemView && arg instanceof Integer) {
          ((BottomNavigationItemView) v).setItemPosition((int) arg);
          return true;
        }
        break;
      case "itemTextAppearance":
        if (v instanceof NavigationView && arg instanceof Integer) {
          ((NavigationView) v).setItemTextAppearance((int) arg);
          return true;
        }
        break;
      case "itemTextColor":
        if (v instanceof BottomNavigationMenuView && arg instanceof ColorStateList) {
          ((BottomNavigationMenuView) v).setItemTextColor((ColorStateList) arg);
          return true;
        }
        if (v instanceof BottomNavigationView && arg instanceof ColorStateList) {
          ((BottomNavigationView) v).setItemTextColor((ColorStateList) arg);
          return true;
        }
        if (v instanceof NavigationView && arg instanceof ColorStateList) {
          ((NavigationView) v).setItemTextColor((ColorStateList) arg);
          return true;
        }
        break;
      case "navigationItemSelectedListener":
        if (v instanceof NavigationView && arg instanceof NavigationView.OnNavigationItemSelectedListener) {
          ((NavigationView) v).setNavigationItemSelectedListener((NavigationView.OnNavigationItemSelectedListener) arg);
          return true;
        }
        break;
      case "needsEmptyIcon":
        if (v instanceof NavigationMenuItemView && arg instanceof Boolean) {
          ((NavigationMenuItemView) v).setNeedsEmptyIcon((boolean) arg);
          return true;
        }
        break;
      case "onNavigationItemReselected":
        if (v instanceof BottomNavigationView && arg instanceof BottomNavigationView.OnNavigationItemReselectedListener) {
          if (arg != null) {
            ((BottomNavigationView) v).setOnNavigationItemReselectedListener(new BottomNavigationView.OnNavigationItemReselectedListener() {
              public void onNavigationItemReselected(MenuItem a0) {
                ((BottomNavigationView.OnNavigationItemReselectedListener) arg).onNavigationItemReselected(a0);
                Anvil.render();
              }
            });
          } else {
            ((BottomNavigationView) v).setOnNavigationItemReselectedListener((BottomNavigationView.OnNavigationItemReselectedListener) null);
          }
          return true;
        }
        break;
      case "onNavigationItemSelected":
        if (v instanceof BottomNavigationView && arg instanceof BottomNavigationView.OnNavigationItemSelectedListener) {
          if (arg != null) {
            ((BottomNavigationView) v).setOnNavigationItemSelectedListener(new BottomNavigationView.OnNavigationItemSelectedListener() {
              public boolean onNavigationItemSelected(MenuItem a0) {
                boolean r = ((BottomNavigationView.OnNavigationItemSelectedListener) arg).onNavigationItemSelected(a0);
                Anvil.render();
                return r;
              }
            });
          } else {
            ((BottomNavigationView) v).setOnNavigationItemSelectedListener((BottomNavigationView.OnNavigationItemSelectedListener) null);
          }
          return true;
        }
        break;
      case "passwordVisibilityToggleContentDescription":
        if (v instanceof TextInputLayout && arg instanceof Integer) {
          ((TextInputLayout) v).setPasswordVisibilityToggleContentDescription((int) arg);
          return true;
        }
        if (v instanceof TextInputLayout && arg instanceof CharSequence) {
          ((TextInputLayout) v).setPasswordVisibilityToggleContentDescription((CharSequence) arg);
          return true;
        }
        break;
      case "passwordVisibilityToggleDrawable":
        if (v instanceof TextInputLayout && arg instanceof Drawable) {
          ((TextInputLayout) v).setPasswordVisibilityToggleDrawable((Drawable) arg);
          return true;
        }
        if (v instanceof TextInputLayout && arg instanceof Integer) {
          ((TextInputLayout) v).setPasswordVisibilityToggleDrawable((int) arg);
          return true;
        }
        break;
      case "passwordVisibilityToggleEnabled":
        if (v instanceof TextInputLayout && arg instanceof Boolean) {
          ((TextInputLayout) v).setPasswordVisibilityToggleEnabled((boolean) arg);
          return true;
        }
        break;
      case "passwordVisibilityToggleTintList":
        if (v instanceof TextInputLayout && arg instanceof ColorStateList) {
          ((TextInputLayout) v).setPasswordVisibilityToggleTintList((ColorStateList) arg);
          return true;
        }
        break;
      case "passwordVisibilityToggleTintMode":
        if (v instanceof TextInputLayout && arg instanceof PorterDuff.Mode) {
          ((TextInputLayout) v).setPasswordVisibilityToggleTintMode((PorterDuff.Mode) arg);
          return true;
        }
        break;
      case "presenter":
        if (v instanceof BottomNavigationMenuView && arg instanceof BottomNavigationPresenter) {
          ((BottomNavigationMenuView) v).setPresenter((BottomNavigationPresenter) arg);
          return true;
        }
        break;
      case "rippleColor":
        if (v instanceof FloatingActionButton && arg instanceof Integer) {
          ((FloatingActionButton) v).setRippleColor((int) arg);
          return true;
        }
        break;
      case "scrimAnimationDuration":
        if (v instanceof CollapsingToolbarLayout && arg instanceof Long) {
          ((CollapsingToolbarLayout) v).setScrimAnimationDuration((long) arg);
          return true;
        }
        break;
      case "scrimVisibleHeightTrigger":
        if (v instanceof CollapsingToolbarLayout && arg instanceof Integer) {
          ((CollapsingToolbarLayout) v).setScrimVisibleHeightTrigger((int) arg);
          return true;
        }
        break;
      case "scrimsShown":
        if (v instanceof CollapsingToolbarLayout && arg instanceof Boolean) {
          ((CollapsingToolbarLayout) v).setScrimsShown((boolean) arg);
          return true;
        }
        break;
      case "selectedItemId":
        if (v instanceof BottomNavigationView && arg instanceof Integer) {
          ((BottomNavigationView) v).setSelectedItemId((int) arg);
          return true;
        }
        break;
      case "selectedTabIndicatorColor":
        if (v instanceof TabLayout && arg instanceof Integer) {
          ((TabLayout) v).setSelectedTabIndicatorColor((int) arg);
          return true;
        }
        break;
      case "selectedTabIndicatorHeight":
        if (v instanceof TabLayout && arg instanceof Integer) {
          ((TabLayout) v).setSelectedTabIndicatorHeight((int) arg);
          return true;
        }
        break;
      case "shiftingMode":
        if (v instanceof BottomNavigationItemView && arg instanceof Boolean) {
          ((BottomNavigationItemView) v).setShiftingMode((boolean) arg);
          return true;
        }
        break;
      case "size":
        if (v instanceof FloatingActionButton && arg instanceof Integer) {
          ((FloatingActionButton) v).setSize((int) arg);
          return true;
        }
        break;
      case "statusBarScrim":
        if (v instanceof CollapsingToolbarLayout && arg instanceof Drawable) {
          ((CollapsingToolbarLayout) v).setStatusBarScrim((Drawable) arg);
          return true;
        }
        break;
      case "statusBarScrimColor":
        if (v instanceof CollapsingToolbarLayout && arg instanceof Integer) {
          ((CollapsingToolbarLayout) v).setStatusBarScrimColor((int) arg);
          return true;
        }
        break;
      case "statusBarScrimResource":
        if (v instanceof CollapsingToolbarLayout && arg instanceof Integer) {
          ((CollapsingToolbarLayout) v).setStatusBarScrimResource((int) arg);
          return true;
        }
        break;
      case "tabGravity":
        if (v instanceof TabLayout && arg instanceof Integer) {
          ((TabLayout) v).setTabGravity((int) arg);
          return true;
        }
        break;
      case "tabMode":
        if (v instanceof TabLayout && arg instanceof Integer) {
          ((TabLayout) v).setTabMode((int) arg);
          return true;
        }
        break;
      case "tabTextColors":
        if (v instanceof TabLayout && arg instanceof ColorStateList) {
          ((TabLayout) v).setTabTextColors((ColorStateList) arg);
          return true;
        }
        break;
      case "textAppearance":
        if (v instanceof NavigationMenuItemView && arg instanceof Integer) {
          ((NavigationMenuItemView) v).setTextAppearance((int) arg);
          return true;
        }
        break;
      case "textColor":
        if (v instanceof BottomNavigationItemView && arg instanceof ColorStateList) {
          ((BottomNavigationItemView) v).setTextColor((ColorStateList) arg);
          return true;
        }
        if (v instanceof NavigationMenuItemView && arg instanceof ColorStateList) {
          ((NavigationMenuItemView) v).setTextColor((ColorStateList) arg);
          return true;
        }
        break;
      case "title":
        if (v instanceof BottomNavigationItemView && arg instanceof CharSequence) {
          ((BottomNavigationItemView) v).setTitle((CharSequence) arg);
          return true;
        }
        if (v instanceof NavigationMenuItemView && arg instanceof CharSequence) {
          ((NavigationMenuItemView) v).setTitle((CharSequence) arg);
          return true;
        }
        if (v instanceof CollapsingToolbarLayout && arg instanceof CharSequence) {
          ((CollapsingToolbarLayout) v).setTitle((CharSequence) arg);
          return true;
        }
        break;
      case "titleEnabled":
        if (v instanceof CollapsingToolbarLayout && arg instanceof Boolean) {
          ((CollapsingToolbarLayout) v).setTitleEnabled((boolean) arg);
          return true;
        }
        break;
      case "typeface":
        if (v instanceof TextInputLayout && arg instanceof Typeface) {
          ((TextInputLayout) v).setTypeface((Typeface) arg);
          return true;
        }
        break;
      case "upWithViewPager":
        if (v instanceof TabLayout && arg instanceof ViewPager) {
          ((TabLayout) v).setupWithViewPager((ViewPager) arg);
          return true;
        }
        break;
      case "useCompatPadding":
        if (v instanceof FloatingActionButton && arg instanceof Boolean) {
          ((FloatingActionButton) v).setUseCompatPadding((boolean) arg);
          return true;
        }
        break;
    }
    return false;
  }
}
